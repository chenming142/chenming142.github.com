<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[chenming142's Blog for github]]></title>
  <link href="http://chenming142.github.com/atom.xml" rel="self"/>
  <link href="http://chenming142.github.com/"/>
  <updated>2013-03-14T00:07:52+08:00</updated>
  <id>http://chenming142.github.com/</id>
  <author>
    <name><![CDATA[Kevin Chen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Spring Test整合JUnit 4]]></title>
    <link href="http://chenming142.github.com/blog/2013/03/13/spring-test/"/>
    <updated>2013-03-13T23:03:00+08:00</updated>
    <id>http://chenming142.github.com/blog/2013/03/13/spring-test</id>
    <content type="html"><![CDATA[<blockquote><p>JUnit 框架原本就能用来进行单元测试,但是在使用了Spring之后测试就变得复杂了,但是幸运的是Spring提供了<a href="http://chenming142.github.com" title="spring-test.jar">Spring-test</a>,可以用来整合JUnit,使测试变得简单.</p></blockquote>

<h3>加入依赖包</h3>

<p>使用Spring整合JUnit来测试需要加入以下依赖包:<br/>
1. <a href="http://www.junit.org/" title="JUnit 4 必不可少">JUnit 4</a><br/>
2. Spring Test(Spring 框架中的test包)<br/>
3. Spring 相关的其他依赖包及其配置</p>

<h3>创建测试源目录和包结构</h3>

<p>推荐创建一个和src平级的源test目录,因为src中的内都是以后需要打包的应用类,而test中的类仅仅只用来测试.test目录下的包名称和结构也建议与src中的保持一致,这样既不会产生冲突也容易识别,方便检索. <br/>
<img src="http://chenming142.github.com/images/common/2013-03-13-spring-test/20130314000238.jpg" title="目录及包结构" alt="目录及包结构" /></p>

<h3>创建测试框架抽象类</h3>

<p>Spring的测试机制是基于JUnit的扩展,在org.springframework.test包下,可以看到6个从 TestCase基础上扩展出来的抽象类,分别是:<br/>
1. <strong>ConditionalTestCase</strong> - 可以有选择地关闭掉一些测试方法,不让它们在测试用例中执行,而无需将这些方法注释掉<br/>
2. <strong>AbstractSpringContextTests</strong> - 运行多个测试用例和测试方法时,Spirng上下文只需创建一次<br/>
3. <strong>AbstractSingleSpringContextTests</strong> - 方便手工执行Spring配置文件,手工设定Spring容器是否需要重新加载<br/>
4. <strong>AbstractDependencyInjectSpringContextTests</strong> - 自动装配\依赖检查\自动注入<br/>
5. <strong>AbstractTransactionalSpringContextTests</strong> - 自动恢复数据库现场即自动回滚<br/>
6. <strong>AbstractTransactionalDataSourceSpringContextTests</strong> - 通过JDBC访问数据库,检查数据库操作正确性</p>

<p>上述抽象类按照先后顺序逐步加强了每个抽象类的功能，并且按照逐步继承的关系，使得子抽象类具有父抽象类的所有特性，因此最终的AbstractTransactionalDataSourceSpringContextTests抽象类具有其所有祖先抽象类的特性以及其自身的特性，实际应用中可以根据需要选择需要使用的抽象基类进行扩展.</p>

<p><strong>基于AbstractDependencyInjectionSpringContextTests的抽象测试类</strong></p>

<pre><code>package com.test.common;

import org.springframework.test.AbstractDependencyInjectionSpringContextTests;

/**
 * 
 * 基于AbstractDependencyInjectionSpringContextTests的抽象测试类
 * 具体测试时，继承此抽象类，完成对Service的测试。此时可以不用关注事务相关的问题。
 * 
 * 注意：在实际测试时，发现如果在Spring配置文件中指定了如下所示的Spring使用的资源文件列表
 *      &lt;bean id="propertyConfigure"
 *          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"&gt;
 *          &lt;property name="locations"&gt;
 *              &lt;list&gt;
 *                  &lt;value&gt;file:WebContent/WEB-INF/db.properties&lt;/value&gt;
 *              &lt;/list&gt;
 *          &lt;/property&gt;
 *      &lt;/bean&gt;
 *则上文中的[file:] 必须加上，否则系统会抛一个FileNotFoundException，而实际运行时，则必须将此处去掉。
 * @author Administrator
 */
public abstract class AbstractServiceInjectionTest 
    extends AbstractDependencyInjectionSpringContextTests {
    // 配置文件地址的前缀
    String filePathSufix = "file:WebContent/WEB-INF/springConfig/"; 
    // applicationContext.xml文件地址
    String appContextFile = "file:WebContent/WEB-INF/springConfig/applicationContext.xml";

    public AbstractServiceInjectionTest() {
        super();
    }

    public AbstractServiceInjectionTest(String name) {
        super(name);
    }
    /**
     * 抽象方法 - 子类必须实现的获取需要配置的文件地址
     * @return
     */
    abstract String[] getOtherConfigs();

    /**
     * 覆盖的获取配置文件地址的方法
     * @return
     * @author Administrator
     */
    @Override
    protected String[] getConfigLocations() {
        String[] otherConfigs = getOtherConfigs();
        //所有配置文件列表
        String[] configFiles = new String[otherConfigs.length + 1]; 
        configFiles[0] = appContextFile;
        System.arraycopy(otherConfigs, 0, configFiles, 1, otherConfigs.length);
        return configFiles;
    }

    /**
     * 抽象方法 - 子类必须实现的需忽略的方法列表
     * @return
     */
    abstract String[] getIgnoredMethods();

    @Override
    protected boolean isDisabledInThisEnvironment(String testMethodName) {
        for(String methodName : getIgnoredMethods()){
            if(methodName.equals(testMethodName)){
                return true;
            }
        }
        return false;
    }

}
</code></pre>

<p><strong>基于AbstractTransactionalSpringContextTests扩展的抽象类 - 可以自动回滚事务的测试抽象基类</strong></p>

<pre><code>package com.test.common;

import org.springframework.test.AbstractTransactionalSpringContextTests;

/**
 * AbstractTransactionalSpringContextTests提供了一套数据库自动回滚的功能，方便恢复数据库现场，从而不必每次测试完成后都重新恢复数据库的操作。
 * 基于AbstractTransactionalSpringContextTests扩展的抽象类 - 可以自动回滚事务的测试抽象基类
 * 
 * 如果在测试时，需要将测试结果持久化，可以直接在测试的方法末尾加上“setComplete()”方法。
 * 由此，可以看出基于AbstractTransactionalSpringContextTests抽象基类的扩展，同样可以将数据持久化到数据库中，
 * 因此，实际测试中，可以使用此方式实现不启用自动事务回滚功能。
 * 
 * 说明：如果使用Spring的事务管理功能，此处在事务处理上可能会有一些冲突，例如将以“query”开头的方法的propagation设置为“NEVER”，
 * 测试时可能会造成事务自动回滚或者不回滚的异常，
 * 此时，需要做的操作是将以“query”开头的方法的propagation设置为默认的“REQUIRED”，同时加上read-only="true"，可以解决此问题。
 * 
 * 另外，AbstractTransactionalSpringContextTests提供了一些可以在事务处理过程中进行操作的各种入口。
 *  onSetUpBeforeTransaction()与onTearDownAfterTransaction()：子类可以覆盖这两个方法，可以在事务测试方法运行的前后执行一些数据库初始化的操作并在事务完成后将其清除；
 *  onSetUpInTransaction()与onTearDownInTransaction()：这对方法和上面介绍的方法完成的功能相同，只不过它们在测试方法的相同事务中执行的。
 *  AbstractTransactionalSpringContextTests还提供了一组用于测试延迟数据加载的方法：
 *      endTransaction()与startNewTransaction()。
 *  当用户在测试Hibernate、JPA等允许延迟数据加载的应用时，模拟数据在Service层事务中被部分加载，当传递到Web层时重新打开事务完成延迟部分数据加载的测试场景。
 *  可以在测试方法中显式调用endTransaction()方法以模拟从Service层中获取部分数据后返回，
 *  然后，通过startNewTransaction()开启一个和原事务无关新事务——模拟在Web层中重新打开事务，接下来就可以访问延迟加载的数据，进行测试了。
 */
public abstract class AbstractServiceTransactionalTest 
    extends AbstractTransactionalSpringContextTests {
    // 配置文件地址的前缀,如果直接配置在WEB-INF目录下的话,可不用前缀
    String filePathSufix = "file:WebContent/WEB-INF/springConfig/"; 
    // applicationContext.xml文件地址,如果直接配置在WEB-INF目录下的话,直接写比如spring/jdbc-config.xml
    String appContextFile = "file:WebContent/WEB-INF/springConfig/applicationContext.xml";

    public AbstractServiceTransactionalTest() {
        super();
    }
    public AbstractServiceTransactionalTest(String name) {
        super(name);
    }

    /**
     * 抽象方法 - 子类必须实现的获取需要配置的文件地址
     * @return
     */
    abstract String[] getOtherConfigs();

    /**
     * 覆盖的获取配置文件地址的方法
     * @return
     * @author Administrator
     */
    @Override
    protected String[] getConfigLocations() {
        String[] otherConfigs = getOtherConfigs();
        //所有配置文件列表
        String[] configFiles = new String[otherConfigs.length + 1]; 
        configFiles[0] = appContextFile;
        System.arraycopy(otherConfigs, 0, configFiles, 1, otherConfigs.length);
        return configFiles;
    }

    /**
     * 抽象方法 - 子类必须实现的需忽略的方法列表
     * @return
     */
    abstract String[] getIgnoredMethods();

    @Override
    protected boolean isDisabledInThisEnvironment(String testMethodName) {
        for(String methodName : getIgnoredMethods()){
            if(methodName.equals(testMethodName)){
                return true;
            }
        }
        return false;
    }
}
</code></pre>

<p><strong>基于AbstractTransactionalDataSourceSpringContextTests抽象类具有其所有祖先抽象类的特性以及其自身的特性</strong></p>

<pre><code>package com.test.common;

import org.springframework.test.AbstractTransactionalDataSourceSpringContextTests;
/**
 * 使用JdbcTemplate获取数据库数据的方式，多用于更新以及复杂的业务逻辑中的数据验证。
 * 有了Spring的测试机制，对于使用Spring的应用，可以方便的进行集成测试，从而简化开发的工作量，减少繁琐的重复工作，提供工作效率。
 * 
 * 注意：如果采用byName的自动装配机制，数据源Bean的名称必须取名为“dataSource”。
 * 
 */
public abstract class AbstractJdbcServiceTest extends AbstractTransactionalDataSourceSpringContextTests {
    String filePathSufix = "file:WebContent/WEB-INF/springConfig/"; // 配置文件地址的前缀
    String appContextFile = "file:WebContent/WEB-INF/springConfig/applicationContext.xml";// applicationContext.xml文件地址

    public AbstractJdbcServiceTest() {
        super();
    }

    public AbstractJdbcServiceTest(String name) {
        super(name);
    }
    /**
     * 抽象方法 - 子类必须实现的获取需要配置的文件地址
     * @return
     */
    abstract String[] getOtherConfigs();

    /**
     * 覆盖的获取配置文件地址的方法
     * @return
     * @author Administrator
     */
    @Override
    protected String[] getConfigLocations() {
        String[] otherConfigs = getOtherConfigs();
        //所有配置文件列表
        String[] configFiles = new String[otherConfigs.length + 1]; 
        configFiles[0] = appContextFile;
        System.arraycopy(otherConfigs, 0, configFiles, 1, otherConfigs.length);
        return configFiles;
    }

    /**
     * 抽象方法 - 子类必须实现的需忽略的方法列表
     * @return
     */
    abstract String[] getIgnoredMethods();

    @Override
    protected boolean isDisabledInThisEnvironment(String testMethodName) {
        for(String methodName : getIgnoredMethods()){
            if(methodName.equals(testMethodName)){
                return true;
            }
        }
        return false;
    }
}
</code></pre>

<p><strong>直接使用JUnit进行测试的抽象基类</strong></p>

<pre><code>package com.test.common;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.FileSystemXmlApplicationContext;

import junit.framework.TestCase;

/**
 * 直接使用JUnit进行测试的抽象基类
 * @author Administrator
 *
 */
public abstract class AbstractServiceTestJUnit extends TestCase {
    /**
     * applicationContext.xml文件的路径,
     * 如果配置文件没有放在classpath下，必须使用此写法；
     * 如果配置文件放在classpath下，则可以直接文件名
     */
    String applicationContextFile = "WebContent\\WEB-INF\\springConfig\\applicationContext.xml";

    static ApplicationContext ctx;

    public AbstractServiceTestJUnit() {
        super();
    }

    public AbstractServiceTestJUnit(String name) {
        super(name);
    }

    /**
     * 抽象方法 - applicationContext.xml文件以外的配置文件的路径列表
     * @return
     */
    abstract String[] getOtherConfigFiles();

    /**
     * 获取 Spring 上下文实例
     * 上下文实例简单使用 singleton,保证上下文只创建一次
     * @return
     */
    ApplicationContext getApplicationContext() {
        if( null == ctx){
            String[] otherConfigs = getOtherConfigFiles();
            String[] configFiles = new String[otherConfigs.length + 1]; // 所有配置文件列表

            configFiles[0] = applicationContextFile;
            System.arraycopy(otherConfigs, 0, configFiles, 1,otherConfigs.length);// 将所有的配置文件列表放入目标配置文件列表

            ctx = new FileSystemXmlApplicationContext(configFiles); // 获取Spring上下文
        }
        return ctx;
    }

    /**
     * 覆盖 setUp 方法，获取Spring上下文实例
     */
    @Override
    protected void setUp() throws Exception {
        getApplicationContext();
    }
}
</code></pre>

<h3>创建、配置测试类及创建测试方法</h3>

<p>上述所说的均为测试基类(抽象类),如创建测试类时根据实际情况继承上述某一抽象类即可.<br/>
在抽象类中已配置了数据库连接配置文件appContextFile.xml,在实际测试类中,仅配置所需用到的Bean配置Spring配置文件. <br/>
测试方法自行添加,并可在方法getIgnoredMethods()中设置是否忽略,而无需注释.</p>

<h3>通过JUnit 4 执行测试</h3>

<p>右键方法名，选择则“Run As” or “Debug As” → “JUnit Test”即可</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[简明 Vim 练级攻略]]></title>
    <link href="http://chenming142.github.com/blog/2013/03/11/vim-strategy/"/>
    <updated>2013-03-11T12:52:00+08:00</updated>
    <id>http://chenming142.github.com/blog/2013/03/11/vim-strategy</id>
    <content type="html"><![CDATA[<blockquote><p>原文地址:<a href="http://coolshell.cn/articles/5426.html" title="酷壳-简明 Vim 练级攻略">http://coolshell.cn/articles/5426.html</a></p></blockquote>

<p>你想以最快的速度学习人类史上最好的文本编辑器VIM吗？你先得懂得如何在VIM幸存下来，然后一点一点地学习各种戏法。<br/>
Vim the Six Billion Dollar editor</p>

<blockquote><blockquote><p>Better, Stronger, Faster.</p></blockquote></blockquote>

<p>学习 <strong>vim</strong> 并且其会成为你最后一个使用的文本编辑器。没有比这个更好的文本编辑器了，非常地难学，但是却不可思议地好用。我建议下面这四个步骤:</p>

<pre><code>1. 存活   
2. 感觉良好  
3. 觉得更好,更强,更快  
4. 使用 VIM 的超能力  
</code></pre>

<p>当你走完这篇文章，你会成为一个vim的 superstar。</p>

<p>在开始学习以前，我需要给你一些警告：</p>

<pre><code>1. 学习vim在开始时是痛苦的。  
2. 需要时间  
3. 需要不断地练习，就像你学习一个乐器一样。  
4. 不要期望你能在3天内把vim练得比别的编辑器更有效率。   
5. 事实上，你需要2周时间的苦练，而不是3天。  
</code></pre>

<h3>第一级 - 存活</h3>

<ol>
<li>安装 VIM</li>
<li>启动 VIM</li>
<li>什么也别干!请先阅读
当你安装好一个编辑器后，你一定会想在其中输入点什么东西，然后看看这个编辑器是什么样子。但vim不是这样的，请按照下面的命令操作：</li>
<li>启 动Vim后，vim在 <strong>Normal</strong> 模式下。</li>
<li>让我们进入 <strong>Insert</strong> 模式，请按下键 <code>i</code> 。(陈皓注：你会看到vim左下角有一个–insert–字样，表示，你可以以插入的方式输入了）</li>
<li>此时，你可以输入文本了，就像你用“记事本”一样。</li>
<li>如果你想返回 <strong>Normal</strong> 模式，请按 <code>ESC</code> 键。</li>
</ol>


<p>现在，你知道如何在 <strong>Insert</strong> 和 <strong>Normal</strong> 模式下切换了。<br/>
下面是一些命令，可以让你在 Normal 模式下幸存下来：
<code>i → Insert 模式，按 ESC 回到 Normal 模式.</code> <br/>
<code>x → 删当前光标所在的一个字符。</code><br/>
<code>:wq → 存盘 + 退出 (:w 存盘, :q 退出)   （陈皓注：:w 后可以跟文件名）</code><br/>
<code>dd → 删除当前行，并把删除的行存到剪贴板里</code><br/>
<code>p → 粘贴剪贴板</code> <br/>
<code>推荐:</code><br/>
<code>hjkl (强例推荐使用其移动光标，但不必需) →你也可以使用光标键 (←↓↑→). 注: j 就像下箭头。</code>
<code>:help &lt;command&gt; → 显示相关命令的帮助。你也可以就输入 :help 而不跟命令。（陈皓注：退出帮助需要输入:q）</code></p>

<p>你能在vim幸存下来只需要上述的那5个命令，你就可以编辑文本了，你一定要把这些命令练成一种下意识的状态。于是你就可以开始进阶到第二级了。</p>

<p>但是，在你进入第二级时，需要再说一下 Normal 模式。在一般的编辑器下，当你需要copy一段文字的时候，你需要使用 Ctrl 键，比如：Ctrl-C。也就是说，Ctrl键就好像功能键一样，当你按下了功能键Ctrl后，C就不在是C了，而且就是一个命令或是一个快键键了，<strong>在VIM的Normal模式下，所有的键就是功能键了</strong>。这个你需要知道。</p>

<p>标记:
下面的文字中，如果是 <code>Ctrl-λ</code>我会写成 <code>&lt;C-λ&gt;</code>.
<em>以 <code>:</code> 开始的命令你需要输入 <enter>回车</em>，例如:如果我写成 :q 也就是说你要输入 :q&lt;enter>.</p>

<h3>第二级 – 感觉良好</h3>

<p>上面的那些命令只能让你存活下来，现在是时候学习一些更多的命令了，下面是我的建议：（陈皓注：所有的命令都需要在Normal模式下使用，如果你不知道现在在什么样的模式，你就狂按几次ESC键）</p>

<ol>
<li><p>各种插入模式<br/>
<code>a → 在光标后插入</code> <br/>
<code>o → 在当前行后插入一个新行</code><br/>
<code>O → 在当前行前插入一个新行(大写)</code><br/>
<code>cw → 替换从光标所在位置后到一个单词结尾的字符</code></p></li>
<li><p>简单的移动光标  <br/>
<code>0 → 数字零，到行头</code> <br/>
<code>^ → 到本行第一个不是blank字符的位置（所谓blank字符就是空格，tab，换行，回车等）</code> <br/>
<code>$ → 到本行行尾</code> <br/>
<code>g_ → 到本行最后一个不是blank字符的位置。</code> <br/>
<code>/pattern → 搜索 pattern 的字符串（陈皓注：如果搜索出多个匹配，可按n键到下一个）</code></p></li>
<li><p>拷贝/粘贴 （陈皓注：p/P都可以，p是表示在当前位置之后，P表示在当前位置之前） <br/>
 <code>P → 粘贴</code> <br/>
 <code>yy → 拷贝当前行当行于 ddP</code></p></li>
<li><p>Undo/Redo <br/>
<code>u → undo</code> <br/>
<code>&lt;C-r&gt; → redo</code></p></li>
<li><p>打开/保存/退出/改变文件(Buffer) <br/>
<code>:e &lt;path/to/file&gt; → 打开一个文件</code> <br/>
<code>:w → 存盘</code> <br/>
<code>:saveas &lt;path/to/file&gt; → 另存为 &lt;path/to/file&gt;</code>  <br/>
<code>:x， ZZ 或 :wq → 保存并退出 (:x 表示仅在需要时保存，ZZ不需要输入冒号并回车)</code> <br/>
<code>:q! → 退出不保存 :qa! 强行退出所有的正在编辑的文件，就算别的文件有更改。</code> <br/>
<code>:bn 和 :bp → 你可以同时打开很多文件，使用这两个命令来切换下一个或上一个文件。（陈皓注：我喜欢使用:n到下一个文件）</code></p></li>
</ol>


<p>花点时间熟悉一下上面的命令，一旦你掌握他们了，你就几乎可以干其它编辑器都能干的事了。但是到现在为止，你还是觉得使用vim还是有点笨拙，不过没关系，你可以进阶到第三级了。</p>

<h3>第三级 – 更好，更强，更快</h3>

<p>先恭喜你！你干的很不错。我们可以开始一些更为有趣的事了。在第三级，我们只谈那些和vi可以兼容的命令。</p>

<p><strong>更好</strong><br/>
下面，让我们看一下vim是怎么重复自己的：<br/>
<code>. → (小数点) 可以重复上一次的命令</code><br/>
<code>N&lt;command&gt; → 重复某个命令N次</code></p>

<p>下面是一个示例，找开一个文件你可以试试下面的命令：<br/>
<code>2dd → 删除2行</code><br/>
<code>3p → 粘贴文本3次</code><br/>
<code>100idesu [ESC] → 会写下 “desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu “</code><br/>
<code>. → 重复上一个命令—— 100 “desu “.</code><br/>
<code>3. → 重复 3 次 “desu” (注意：不是 300，你看，VIM多聪明啊).</code></p>

<p><strong>更强</strong><br/>
你要让你的光标移动更有效率，你一定要了解下面的这些命令，千万别跳过。<br/>
<code>NG → 到第 N 行 （陈皓注：注意命令中的G是大写的，另我一般使用 : N 到第N行，如 :137 到第137行）</code><br/>
<code>gg → 到第一行。（陈皓注：相当于1G，或 :1）</code> <br/>
<code>G → 到最后一行。</code><br/>
<code>按单词移动： w → 到下一个单词的开头。 e → 到下一个单词的结尾。</code></p>

<pre><code>如果你认为单词是由默认方式，那么就用小写的e和w。   
默认上来说，一个单词由字母，数字和下划线组成（陈皓注：程序变量）  
如果你认为单词是由blank字符分隔符，那么你需要使用大写的E和W。（陈皓注：程序语句）
</code></pre>

<p>下面，让我来说说最强的光标移动：<br/>
<code>% : 匹配括号移动，包括 (, {, [. （陈皓注：你需要把光标先移到括号上）</code>
<code>* 和 #:  匹配光标当前所在的单词，移动光标到下一个（或上一个）匹配单词（*是下一个，#是上一个）</code>
相信我，上面这三个命令对程序员来说是相当强大的。</p>

<p><strong>更快</strong><br/>
你一定要记住光标的移动，因为很多命令都可以和这些移动光标的命令连动。很多命令都可以如下来干：
例如 <code>0y$</code> 命令意味着：<br/>
<code>0 → 先到行头, y → 从这里开始拷贝, $ → 拷贝到本行最后一个字符</code><br/>
你可可以输入 <code>ye，从当前位置拷贝到本单词的最后一个字符。</code><br/>
你也可以输入 <code>y2/foo 来拷贝2个 “foo” 之间的字符串。</code><br/>
还有很多时间并不一定你就一定要按y才会拷贝，下面的命令也会被拷贝：<br/>
<code>d (删除 )  v (可视化的选择)  gU (变大写)  gu (变小写) </code></p>

<pre><code>（陈皓注：可视化选择是一个很有意思的命令，   
     你可以先按v，然后移动光标，你就会看到文本被选择，然后，你可能d，也可y，也可以变大写等）  
</code></pre>

<h3>第四级 – Vim 超能力</h3>

<p>你只需要掌握前面的命令，你就可以很舒服的使用VIM了。但是，现在，我们向你介绍的是VIM杀手级的功能。<br/>
下面这些功能是我只用vim的原因。
在当前行上移动光标: <strong>0 ^ $ f F t T </strong>; <br/>
<code>0 → 到行头</code><br/>
<code>^ → 到本行的第一个非blank字符</code><br/>
<code>$ → 到行尾</code><br/>
<code>g_ → 到本行最后一个不是blank字符的位置。</code>
<code>fa → 到下一个为a的字符处，你也可以fs到下一个为s的字符。</code><br/>
<code>t, → 到逗号前的第一个字符。逗号可以变成其它字符。</code><br/>
<code>3fa → 在当前行查找第三个出现的a。</code><br/>
<code>F 和 T → 和 f 和 t 一样，只不过是相反方向。</code></p>

<pre><code>还有一个很有用的命令是 dt" → 删除所有的内容，直到遇到双引号—— "。
</code></pre>

<p><strong>区域选择 : &lt;action>a&lt;object></strong> 或 <strong>&lt;action>i&lt;object></strong><br/>
在 <strong>visual</strong> 模式下，这些命令很强大，其命令格式为 &lt;action>a&lt;object> 和 &lt;action>i&lt;object></p>

<pre><code>action可以是任何的命令，如 d (删除), y (拷贝), v (可以视模式选择)。
object 可能是： w 一个单词， W 一个以空格为分隔的单词， s 一个句字， p 一个段落。  
也可以是一个特别的字符："、 '、 )、 }、 ]。  
</code></pre>

<p>假设你有一个字符串 (map (+) (&#8220;foo&#8221;)), 而光标键在第一个 o 的位置。 <br/>
<code>vi" → 会选择 foo.</code>  <br/>
<code>va" → 会选择 "foo".</code> <br/>
<code>vi) → 会选择 "foo".</code> <br/>
<code>va) → 会选择("foo").</code> <br/>
<code>v2i) → 会选择 map (+) ("foo")</code>  <br/>
<code>v2a) → 会选择 (map (+) ("foo"))</code></p>

<p><strong>块操作 : &lt;C-v></strong> <br/>
块操作，典型的操作： 0 &lt;C-v> &lt;C-d> I&#8211; [ESC]</p>

<pre><code>^ → 到行头   
&lt;C-v&gt; → 开始块操作 
&lt;C-d&gt; → 向下移动 (你也可以使用hjkl来移动光标，或是使用%，或是别的)   
I-- [ESC] → I是插入，插入“--”，按ESC键来为每一行生效。
在Windows下的vim，你需要使用 &lt;C-q&gt; 而不是 &lt;C-v&gt; ，&lt;C-v&gt; 是拷贝剪贴板。
</code></pre>

<p><strong>自动提示： &lt;C-n> 和 &lt;C-p></strong> <br/>
在 <strong>Insert</strong> 模式下，你可以输入一个词的开头，然后按 &lt;C-p>或是&lt;C-n>，自动补齐功能就出现了……</p>

<p><strong>宏录制： qa 操作序列 q, @a, @@</strong></p>

<pre><code>qa 把你的操作记录在寄存器 a。 于是 @a 会replay被录制的宏。 @@ 是一个快捷键用来replay最新录制的宏。
</code></pre>

<p>示例 : 在一个只有一行且这一行只有“1”的文本中，键入如下命令：</p>

<pre><code>qaYp&lt;C-a&gt;q→ qa 开始录制 Yp 复制行.  &lt;C-a&gt; 增加1.  q 停止录制.  @a → 在1下面写下 2 @@ → 在2 正面写下3
</code></pre>

<p>现在做 100@@ 会创建新的100行，并把数据增加到 103.</p>

<p><strong>可视化选择： v,V,&lt;C-v></strong> <br/>
前面，我们看到了 <C-v>的示例 （<code>在Windows下应该是&lt;C-q&gt;</code>），我们可以使用 v 和 V。一但被选好了，你可以做下面的事：</p>

<pre><code>J → 把所有的行连接起来（变成一行）
&lt; 或 &gt; → 左右缩进
= → 自动给缩进 （陈皓注：这个功能相当强大，我太喜欢了）
</code></pre>

<p>在所有被选择的行后加上点东西：<code>&lt;C-v&gt;</code></p>

<pre><code>选中相关的行 (可使用 j 或 &lt;C-d&gt; 或是 /pattern 或是 % 等……)
$ 到行最后
A, 输入字符串，按 ESC。
</code></pre>

<p><strong>分屏: :split 和 vsplit.</strong>
下面是主要的命令，你可以使用VIM的帮助 :help split. 你可以参考本站以前的一篇文章VIM分屏。</p>

<pre><code>:split → 创建分屏 (:vsplit创建垂直分屏)
&lt;C-w&gt;&lt;dir&gt; : dir就是方向，可以是 hjkl 或是 ←↓↑→ 中的一个，其用来切换分屏。
&lt;C-w&gt;_ (或 &lt;C-w&gt;|) : 最大化尺寸 (&lt;C-w&gt;| 垂直分屏)
&lt;C-w&gt;+ (或 &lt;C-w&gt;-) : 增加尺寸
</code></pre>

<h3>结束语</h3>

<blockquote><p>上面是作者最常用的90%的命令。
我建议你每天都学1到2个新的命令。
在两到三周后，你会感到vim的强大的。
有时候，学习VIM就像是在死背一些东西。
幸运的是，vim有很多很不错的工具和优秀的文档。
运行vimtutor直到你熟悉了那些基本命令。
其在线帮助文档中你应该要仔细阅读的是 :help usr_02.txt.
你会学习到诸如  !， 目录，寄存器，插件等很多其它的功能。
学习vim就像学弹钢琴一样，一旦学会，受益无穷。</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UML 建模之时序图(Sequence Diagram)]]></title>
    <link href="http://chenming142.github.com/blog/2013/03/10/sequence-diagram/"/>
    <updated>2013-03-10T15:52:00+08:00</updated>
    <id>http://chenming142.github.com/blog/2013/03/10/sequence-diagram</id>
    <content type="html"><![CDATA[<blockquote><p>原文:<a href="http://www.cnblogs.com/ywqu" title="灵动生活">http://www.cnblogs.com/ywqu</a></p></blockquote>

<p><strong>一、时序图简介（Brief introduction）</strong><br/>
<strong>二、时序图元素（Sequence Diagram Elements）</strong></p>

<blockquote><ul>
<li>角色（Actor）</li>
<li>对象（Object）</li>
<li>生命线(Lifeline)</li>
<li>控制焦点（Focus of Control）</li>
<li>消息（Message）</li>
<li>自关联消息（Self-Message）</li>
<li>Combined Fragments</li>
</ul>
</blockquote>

<p><strong>三、时序图实例分析（Sequece Diagram Example Analysis）</strong></p>

<blockquote><ul>
<li>时序图场景</li>
<li>时序图实例</li>
<li>时序图实例分析</li>
</ul>
</blockquote>

<p><strong>四、总结（Summay）</strong></p>

<h3>一、时序图简介（Brief introduction）</h3>

<p>   时序图是显示<strong>对象之间交互的图</strong>,这些<strong>对象时按时间顺序排列</strong>的。顺序图中显示的是<strong>参与交互对象之间消息交互的顺序</strong>。时序图中包括建模元素主要有:<strong>对象、控制焦点、消息</strong>等等。</p>

<h3>二、时序图元素（Sequence Diagram Elements）</h3>

<p><strong>角色</strong>：系统角色，可以是人、甚至其他的系统或子系统<br/>
<strong>对象</strong>：对象包括三中命名方式：<br/>
   1. 包括对象名和类名<br/>
   2. 只显示类名不显示对象名，即表示它是匿名对象<br/>
   3. 只显示对象名不显示类名  <br/>
<img src="http://chenming142.github.com/images/common/2013-03-10-sequence-diagram/3347379_1.jpg" title="Object" alt="对象的命名方式" /></p>

<p><strong>生命线</strong>：生命线在顺序图中表示从对象图片向下延伸的一条虚线,表示对象存在的时间,如下图：<img src="http://chenming142.github.com/images/common/2013-03-10-sequence-diagram/3347379_2.gif" title="Lifeline" alt="生命线" /></p>

<p><strong>控制焦点</strong>：控制焦点是顺序图中表示时间的符号，在这个时间段内对象执行相应的操作，用小矩形表示，如下图：<img src="http://chenming142.github.com/images/common/2013-03-10-sequence-diagram/3347379_3.jpg" title="Focus of Control" alt="控制焦点" /></p>

<p><strong>消息</strong>：消息一般分为同步消息（Synchronous Message），异步消息（Asynchronous Message）和返回消息（Return Message）如下图：<br/>
<img src="http://chenming142.github.com/images/common/2013-03-10-sequence-diagram/3347379_4.gif" title="Message" alt="消息" /></p>

<ul>
<li>同步消息 == 调用消息<br/>
消息的发送者把控制传递给消息的接收者,然后停止活动,等待消息的接受者放弃或者返回控制。用来表示<strong>同步</strong>的意义。</li>
<li>异步消息
消息的发送者通过消息把信号传递给消息的接受者,然后继续自己的活动,不等待接受者返回消息或控制。异步消息的接受者和发送者是并发工作的。</li>
<li>返回消息
返回消息表示从过程调用返回</li>
</ul>


<p><strong>自关联消息</strong> : 表示方法的自身调用以及一个对象内的一个方法调用另一个方法。如下图:<br/>
<img src="http://chenming142.github.com/images/common/2013-03-10-sequence-diagram/3347379_5.gif" title="Sef-Message" alt="自关联消息" /></p>

<p><strong>Combined Fragments</strong><br/>
<img src="http://chenming142.github.com/images/common/2013-03-10-sequence-diagram/3347379_6.gif" title="Combined Fragments" alt="Combined Fragments" /></p>

<ul>
<li>Altemative fragment(denoted &#8220;alt&#8221;)与 if&#8230;then&#8230;else对应</li>
<li>Option fragment(denoted &#8220;opt&#8221;)与Switch对应</li>
<li>Parallel fragment(denoted &#8220;par&#8221;)表示同时发生</li>
<li>Loop fragment(denoted &#8220;loop&#8221;)与for或foreach对应</li>
</ul>


<h3>三、时序图实例分析</h3>

<p><strong>时序图场景</strong><br/>
完成课程创建功能,主要流程有:<br/>
1. 请求添加课程页面,填写课程表单,点击<code>create</code>按钮<br/>
2. 添加课程信息到数据库<br/>
3. 向课程对象追加主题信息<br/>
4. 为课程指派教师<br/>
5. 完成课程创建功能</p>

<p><strong>时序图实例</strong>
<img src="http://chenming142.github.com/images/common/2013-03-10-sequence-diagram/3347379_7.jpg" alt="时序图实例" /></p>

<p><strong>时序图分析</strong><br/>
1. 序号1.0-1.3   完成页面的初始化<br/>
2. 序号1.4-1.5   课程管理员填充课程表单<br/>
3. 序号1.6-1.7   课程管理员点击<code>create</code>按钮,并相应点击事件<br/>
4. 序号1.8       Service 层创建课程<br/>
5. 序号1.9-1.10  添加课程到数据库,并返回课程编号CourseId<br/>
6. 序号1.11-1.12 添加课程主题到数据库,并返回主题编号topicId<br/>
7. 序号1.13      给课程指派教师 <br/>
8. 序号1.14      向界面抛创建课程成功与否的消息</p>

<h3>四、总结</h3>

<p>   时序图是显示对象之间交互顺序的图,这次对象是按时间顺序排列的.时序图中显示的是参与交互的对象及对象之间消息交互的顺序.时序图中包括的建模的元素主要有:对象、控制焦点、消息等等。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[20个非常有用的java程序片段]]></title>
    <link href="http://chenming142.github.com/blog/2013/03/10/20-useful-snippets-of-java-program/"/>
    <updated>2013-03-10T10:18:00+08:00</updated>
    <id>http://chenming142.github.com/blog/2013/03/10/20-useful-snippets-of-java-program</id>
    <content type="html"><![CDATA[<blockquote><p>原文地址是:<a href="http://coolshell.cn/articles/889.html" title="酷壳-CoolShell.cn">http://coolshell.cn/articles/889.html</a></p></blockquote>

<p>下面是20个非常有用的Java程序片段，希望能对你有用。</p>

<ol>
<li>字符串有整型的相互转换

<pre><code>string a = String.valueOf(2);             // integer to numeric string
int i = Integer.parseInt(a);              // numeric string to an int
</code></pre></li>
<li>向文件末尾添加内容

<pre><code>BufferWriter out = null;   
try{   
    out = new BufferWriter(new FileWriter("filename", true));
    out.write("aString");
}catch(IOException e){
    // error processing code
}finally{
    if(out != null){
        out.close();
    }
}
</code></pre></li>
<li>得到当前方法的名称

<pre><code> string methodName = Thread.currentThread().getStackTrace()[1].getMethodName();
</code></pre></li>
<li>转字符串到日期格式

<pre><code> java.util.Date = java.text.DateFormat.getDateInstance().parse(date, String);
 或者是:   
 SimpleDateFormat sdf = new SimpleDateFormat("dd.MM.yyyy");
 Date d = sdf.parse( myString );
</code></pre></li>
<li>使用JDBC连接Oracle

<pre><code> public class OracleJDBCTest{  
   String driverClass = "oracle.jdbc.driver.OracleDriver";
   Connection con;   
   public void init(FileInputStream fs) throws ClassNotFoundException, SQLException,   
      FileNotFoundException, IOException{
         Properties props = new Properties();
         props.load(fs);
         String url = props.getProperty("db.url");
         String username = props.getProperty("db.username");
         String password = props.getProperty("db.password");  
         Class.forName(driverClass);
         con = DriverManager.getConnection(url, username, password);
     }
     public void fetch() throws SQLException, IOException{
         PreparedStatement ps = con.prePareStatement("select SYSDATE from dual");
         ResultSet rs = ps.executeQuery();
         while(rs.next()){
             // do the things you do
         }
         rs.close();
         ps.close();
     }
     public static void main(String[] args){
         OracleJDBCTest test = new OracleJDBCTest();
         test.init();
         test.fetch();
     }
 }
</code></pre></li>
<li>把java.util.Date 转换成java.sql.Date

<pre><code> java.util.Date utilDate = new java.util.Date();
 java.sql.Date sqlDate = new java.sql.Date(utilDate.getTime());
</code></pre></li>
<li>使用NIO进行快速的文件拷贝

<pre><code> public static void fileCopy( File in , File out )throws IOException{
     FileChannel inChannel = new FileInputStream( in ).getChannel();
     FileChannel outChannel = new FileOutputStream( in ).getChannel();
     try{
         // inChannel.transferTo(0, inChannel.size(), outChannel); 
         // original -- apparently has trouble copying large files on Windows
         // magic number for Windows, 64Mb - 32Kb)
         int maxCount = (64 * 1024 * 1024) - (32 * 1024);
         long size = inChannel.size();
         long position = 0;
         while ( position &lt; size ){
             position += inChannel.transferTo( position, maxCount, outChannel );
         }
     }finally{
         if ( inChannel != null ){
             inChannel.close();
         }
         if ( outChannel != null ){
             outChannel.close();
         }
     }
 }
</code></pre></li>
<li>创建图片的缩略图

<pre><code> private void createThumbnail(String filename, int thumbWidth,   
     int thumbHeight, int quality, String outFilename)  
     throws InterruptedException, FileNotFoundException, IOException{  
     // load image from filename  
     Image image = Toolkit.getDefaultToolkit().getImage(filename);
     MediaTracker mediaTracker = new MediaTracker(new Container());  
     mediaTracker.addImage(image, 0);  
     mediaTracker.waitForID(0);  
     // test for errors at this point: System.out.println(mediaTracker.isErrorAny());  
     // determine thumbnail size from WIDTH and HEIGHT  
     double thumbRatio = (double)thumbWidth / (double)thumbHeight;  
     int imageWidth = image.getWidth(null);  
     int imageHeight = image.getHeight(null);  
     double imageRatio = (double)imageWidth / (double)imageHeight;  
     if (thumbRatio &lt; imageRatio) {  
         thumbHeight = (int)(thumbWidth / imageRatio);  
     } else {  
         thumbWidth = (int)(thumbHeight * imageRatio);  
     }  

     // draw original image to thumbnail image object and  
     // scale it to the new size on-the-fly  
     BufferedImage thumbImage = new BufferedImage(thumbWidth, 
         thumbHeight, BufferedImage.TYPE_INT_RGB);  
     Graphics2D graphics2D = thumbImage.createGraphics();  
     graphics2D.setRenderingHint(RenderingHints.KEY_INTERPOLATION,   
         RenderingHints.VALUE_INTERPOLATION_BILINEAR);  
     graphics2D.drawImage(image, 0, 0, thumbWidth, thumbHeight, null);  

     // save thumbnail image to outFilename  
     BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(outFilename));  
     JPEGImageEncoder encoder = JPEGCodec.createJPEGEncoder(out);  
     JPEGEncodeParam param = encoder.getDefaultJPEGEncodeParam(thumbImage);  
     quality = Math.max(0, Math.min(quality, 100));  
     param.setQuality((float)quality / 100.0f, false);  
     encoder.setJPEGEncodeParam(param);  
     encoder.encode(thumbImage);  
     out.close();  
 } 
</code></pre></li>
<li>创建 JSON 格式的数据
请先阅读这篇文章 了解一些细节，并下面这个JAR 文件：<a href="http://viralpatel.net/blogs/download/json/json-rpc-1.0.jar" title="json-rpc-1.0">json-rpc-1.0.jar (75 kb)</a>;

<pre><code> import org.json.JSONObject;  
 ...  
 ...  
 JSONObject json = new JSONObject();  
 json.put("city", "Mumbai");  
 json.put("country", "India");  
 ...  
 String output = json.toString();  
 ... 
</code></pre></li>
<li>使用iText JAR生成PDF
阅读这篇<a href="http://viralpatel.net/blogs/generate-pdf-file-in-java-using-itext-jar/" title="PDF Generation in Java using iText JAR">文章</a> 了解更多细节

<pre><code>import java.io.File;  
import java.io.FileOutputStream;  
import java.io.OutputStream;  
import java.util.Date;  

import com.lowagie.text.Document;  
import com.lowagie.text.Paragraph;  
import com.lowagie.text.pdf.PdfWriter;  

public class GeneratePDF {  
    public static void main(String[] args) {  
        try {  
            OutputStream file = new FileOutputStream(new File("C:\\Test.pdf"));  

            Document document = new Document();  
            PdfWriter.getInstance(document, file);  
            document.open();  
            document.add(new Paragraph("Hello Kiran"));  
            document.add(new Paragraph(new Date().toString()));  

            document.close();  
            file.close();  

        } catch (Exception e) {  
            e.printStackTrace();  
        }  
    }   
}
</code></pre></li>
<li>HTTP 代理设置
阅读这篇 <a href="http://viralpatel.net/blogs/http-proxy-setting-java-setting-proxy-java/" title="HTTP Proxy setting in Java. Setting up proxy.">文章</a> 了解更多细节。

<pre><code>System.getProperties().put("http.proxyHost", "someProxyURL");  
System.getProperties().put("http.proxyPort", "someProxyPort");  
System.getProperties().put("http.proxyUser", "someUserName");  
System.getProperties().put("http.proxyPassword", "somePassword"); 
</code></pre></li>
<li>单实例Singleton 示例
请先阅读这篇<a href="http://viralpatel.net/blogs/java-singleton-design-pattern-tutorial-example-singleton-j2ee-design-pattern/" title="Java Singleton design pattern tutorial.">文章</a> 了解更多信息

<pre><code>public class SimpleSingleton {  
    private static SimpleSingleton singleInstance =  new SimpleSingleton();  

    //Marking default constructor private  
    //to avoid direct instantiation.  
    private SimpleSingleton() {  
    }  

    //Get instance for class SimpleSingleton  
    public static SimpleSingleton getInstance() {  

        return singleInstance;  
    }  
} 
</code></pre>

或另一种实现方式

<pre><code>public enum SimpleSingleton {  
    INSTANCE;  
    public void doSomething() {  
    }  
}  

//Call the method from Singleton:  
SimpleSingleton.INSTANCE.doSomething(); 
</code></pre></li>
<li>抓屏程序
阅读这篇<a href="http://viralpatel.net/blogs/how-to-take-screen-shots-in-java-taking-screenshots-java/" title="How to take screen shots in Java">文章</a> 获得更多信息。

<pre><code>import java.awt.Dimension;  
import java.awt.Rectangle;  
import java.awt.Robot;  
import java.awt.Toolkit;  
import java.awt.image.BufferedImage;  
import javax.imageio.ImageIO;  
import java.io.File;  

...  

public void captureScreen(String fileName) throws Exception {  

   Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();  
   Rectangle screenRectangle = new Rectangle(screenSize);  
   Robot robot = new Robot();  
   BufferedImage image = robot.createScreenCapture(screenRectangle);  
   ImageIO.write(image, "png", new File(fileName));  

}  
... 
</code></pre></li>
<li>列出文件和目录

<pre><code>File dir = new File("directoryName");  
String[] children = dir.list();  
if (children == null) {  
  // Either dir does not exist or is not a directory  
} else {  
  for (int i=0; i &lt; children.length; i++) {  
      // Get filename of file or directory  
      String filename = children[i];  
  }  
}  

// It is also possible to filter the list of returned files.  
// This example does not return any files that start with '.'.  
FilenameFilter filter = new FilenameFilter() {  
  public boolean accept(File dir, String name) {  
      return !name.startsWith(".");  
  }  
};  
children = dir.list(filter);  

// The list of files can also be retrieved as File objects  
File[] files = dir.listFiles();  

// This filter only returns directories  
FileFilter fileFilter = new FileFilter() {  
  public boolean accept(File file) {  
      return file.isDirectory();  
  }  
};  
files = dir
</code></pre></li>
<li>创建ZIP和JAR文件

<pre><code>import java.util.zip.*;  
import java.io.*;  

public class ZipIt {  
    public static void main(String args[]) throws IOException {  
        if (args.length &lt; 2) {  
            System.err.println("usage: java ZipIt Zip.zip file1 file2 file3");  
            System.exit(-1);  
        }  
        File zipFile = new File(args[0]);  
        if (zipFile.exists()) {  
            System.err.println("Zip file already exists, please try another");  
            System.exit(-2);  
        }  
        FileOutputStream fos = new FileOutputStream(zipFile);  
        ZipOutputStream zos = new ZipOutputStream(fos);  
        int bytesRead;  
        byte[] buffer = new byte[1024];  
        CRC32 crc = new CRC32();  
        for (int i=1, n=args.length; i &lt; n; i++) {  
            String name = args[i];  
            File file = new File(name);  
            if (!file.exists()) {  
                System.err.println("Skipping: " + name);  
                continue;  
            }  
            BufferedInputStream bis = new BufferedInputStream(  
                new FileInputStream(file));  
            crc.reset();  
            while ((bytesRead = bis.read(buffer)) != -1) {  
                crc.update(buffer, 0, bytesRead);  
            }  
            bis.close();  
            // Reset to beginning of input stream  
            bis = new BufferedInputStream(  
                new FileInputStream(file));  
            ZipEntry entry = new ZipEntry(name);  
            entry.setMethod(ZipEntry.STORED);  
            entry.setCompressedSize(file.length());  
            entry.setSize(file.length());  
            entry.setCrc(crc.getValue());  
            zos.putNextEntry(entry);  
            while ((bytesRead = bis.read(buffer)) != -1) {  
                zos.write(buffer, 0, bytesRead);  
            }  
            bis.close();  
        }  
        zos.close();  
    }  
} 
</code></pre></li>
<li>解析/读取XML 文件<br/>
XML文件:

<pre><code>&lt;?xml version="1.0"?&gt; 
&lt;students&gt; 
    &lt;student&gt; 
        &lt;name&gt;John&lt;/name&gt; 
        &lt;grade&gt;B&lt;/grade&gt; 
        &lt;age&gt;12&lt;/age&gt; 
    &lt;/student&gt; 
    &lt;student&gt; 
        &lt;name&gt;Mary&lt;/name&gt; 
        &lt;grade&gt;A&lt;/grade&gt; 
        &lt;age&gt;11&lt;/age&gt; 
    &lt;/student&gt; 
    &lt;student&gt; 
        &lt;name&gt;Simon&lt;/name&gt; 
        &lt;grade&gt;A&lt;/grade&gt; 
        &lt;age&gt;18&lt;/age&gt; 
    &lt;/student&gt; 
&lt;/students&gt; 
</code></pre>

Java代码:

<pre><code>package net.viralpatel.java.xmlparser;  

import java.io.File;  
import javax.xml.parsers.DocumentBuilder;  
import javax.xml.parsers.DocumentBuilderFactory;  

import org.w3c.dom.Document;  
import org.w3c.dom.Element;  
import org.w3c.dom.Node;  
import org.w3c.dom.NodeList;  

public class XMLParser {  

    public void getAllUserNames(String fileName) {  
        try {  
            DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();  
            DocumentBuilder db = dbf.newDocumentBuilder();  
            File file = new File(fileName);  
            if (file.exists()) {  
                Document doc = db.parse(file);  
                Element docEle = doc.getDocumentElement();  

                // Print root element of the document  
                System.out.println("Root element of the document: " + docEle.getNodeName());  

                NodeList studentList = docEle.getElementsByTagName("student");  

                // Print total student elements in document  
                System.out.println("Total students: " + studentList.getLength());  
                if (studentList != null &amp;&amp; studentList.getLength() &gt; 0) {  
                    for (int i = 0; i &lt; studentList.getLength(); i++) {  
                        Node node = studentList.item(i);  
                        if (node.getNodeType() == Node.ELEMENT_NODE) {  
                            System.out.println("=====================");  
                            Element e = (Element) node;  
                            NodeList nodeList = e.getElementsByTagName("name");  
                            System.out.println("Name: " 
                                    + nodeList.item(0).getChildNodes().item(0).getNodeValue());  
                            nodeList = e.getElementsByTagName("grade");  
                            System.out.println("Grade: " 
                                    + nodeList.item(0).getChildNodes().item(0).getNodeValue());  

                            nodeList = e.getElementsByTagName("age");  
                            System.out.println("Age: " 
                                    + nodeList.item(0).getChildNodes().item(0).getNodeValue());  
                        }  
                    }  
                } else {  
                    System.exit(1);  
                }  
            }  
        } catch (Exception e) {  
            System.out.println(e);  
        }  
    }  
    public static void main(String[] args) {  
        XMLParser parser = new XMLParser();  
        parser.getAllUserNames("c:\\test.xml");  
    }  
}
</code></pre></li>
<li>把 Array 转换成 Map

<pre><code>import java.util.Map;  
import org.apache.commons.lang.ArrayUtils;  
public class Main {  
  public static void main(String[] args) {  
    String[][] countries = { 
            { "United States", "New York" }, 
            { "United Kingdom", "London" },
            { "Netherland", "Amsterdam" }, 
            { "Japan", "Tokyo" }, 
            { "France", "Paris" } 
    };  
    Map countryCapitals = ArrayUtils.toMap(countries);  
    System.out.println("Capital of Japan is " + countryCapitals.get("Japan"));
    System.out.println("Capital of France is " + countryCapitals.get("France"));  
  }  
} 
</code></pre></li>
<li>发送邮件

<pre><code>import javax.mail.*;  
import javax.mail.internet.*;  
import java.util.*;  

public void postMail( String recipients[ ], String subject, String message , String from)
 throws MessagingException {  
    boolean debug = false;  

     //Set the host smtp address  
     Properties props = new Properties();  
     props.put("mail.smtp.host", "smtp.example.com");  

    // create some properties and get the default Session  
    Session session = Session.getDefaultInstance(props, null);  
    session.setDebug(debug);  

    // create a message  
    Message msg = new MimeMessage(session);  

    // set the from and to address  
    InternetAddress addressFrom = new InternetAddress(from);  
    msg.setFrom(addressFrom);  

    InternetAddress[] addressTo = new InternetAddress[recipients.length];  
    for (int i = 0; i &lt; recipients.length; i++)  
    {  
        addressTo[i] = new InternetAddress(recipients[i]);  
    }  
    msg.setRecipients(Message.RecipientType.TO, addressTo);  

    // Optional : You can also set your custom headers in the Email if you Want  
    msg.addHeader("MyHeaderName", "myHeaderValue");  

    // Setting the Subject and Content Type  
    msg.setSubject(subject);  
    msg.setContent(message, "text/plain");  
    Transport.send(msg);  
} 
</code></pre></li>
<li>发送代数据的HTTP 请求

<pre><code>import java.io.BufferedReader;  
import java.io.InputStreamReader;  
import java.net.URL;  

public class Main {  
    public static void main(String[] args)  {  
        try {  
            URL my_url = new URL("http://coolshell.cn/");  
            BufferedReader br = new BufferedReader(new InputStreamReader(my_url.openStream()));  
            String strTemp = "";  
            while(null != (strTemp = br.readLine())){  
            System.out.println(strTemp);  
        }  
        } catch (Exception ex) {  
            ex.printStackTrace();  
        }  
    }  
}
</code></pre></li>
<li>改变数组的大小

<pre><code>/** 
* Reallocates an array with a new size, and copies the contents 
* of the old array to the new array. 
* @param oldArray  the old array, to be reallocated. 
* @param newSize   the new array size. 
* @return          A new array with the same contents. 
*/ 
private static Object resizeArray (Object oldArray, int newSize) {  
   int oldSize = java.lang.reflect.Array.getLength(oldArray);  
   Class elementType = oldArray.getClass().getComponentType();  
   Object newArray = java.lang.reflect.Array.newInstance(  
         elementType,newSize);  
   int preserveLength = Math.min(oldSize,newSize);  
   if (preserveLength &gt; 0)  
      System.arraycopy (oldArray,0,newArray,0,preserveLength);  
   return newArray;  
}  

// Test routine for resizeArray().  
public static void main (String[] args) {  
   int[] a = {1,2,3};  
   a = (int[])resizeArray(a,5);  
   a[3] = 4;  
   a[4] = 5;  
   for (int i=0; i&lt;a.length; i++)  
      System.out.println (a[i]);  
}
</code></pre></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java构造时成员初始化的陷阱]]></title>
    <link href="http://chenming142.github.com/blog/2013/03/08/java-constructor-trap/"/>
    <updated>2013-03-08T22:21:00+08:00</updated>
    <id>http://chenming142.github.com/blog/2013/03/08/java-constructor-trap</id>
    <content type="html"><![CDATA[<blockquote><p>原文:<a href="http://blog.csdn.net/haoel/article/details/4319793" title="陈皓专栏">http://blog.csdn.net/haoel/article/details/4319793</a></p></blockquote>

<p>让我们先来看两个类: <strong>Base</strong> 和 <strong>Derived</strong> 类.注意其中的 <em>whenAmISet</em> 的成员变量,和方法 <em>preProcess()</em>.</p>

<pre><code>public class Base{
    Base(){
        preProcess();
    }
    void preProcess();
}
public class Derived extends Base{
    public String whenAmISet = "set when declared";
    @Override void preProcess(){
        whenAmISet = "set in preProcess()";
    }
}
</code></pre>

<p>如果我们构造一个子类实例,那么 <strong>whenAmISet</strong> 的值会是什么呢?</p>

<pre><code>public class Main{
    public static void main(String[] args){
        Derived d = new Derived();
        System.out.println( d.whenAmISet );
    }
}
</code></pre>

<p>再续继往下阅读之前，请先给自己一些时间想一下上面的这段程序的输出是什么？是的，这看起来的确相当简单，甚至不需要编译和运行上面的代码，我们也应该知道其答案，那么，你觉得你知道答案吗？你确定你的答案正确吗？</p>

<p>很多人都会觉得那段程序的输出应该是<code>set in preProcess()</code>，这是因为当子类Derived 的构造函数被调用时，其会隐晦地调用其基类Base的构造函数（通过super()函数），于是基类Base的构造函数会调用preProcess() 函数，因为这个类的实例是Derived的，而且在子类Derived中对这个函数使用了override关键字，所以，实际上调用到的是：<code>Derived.preProcess()</code>，而这个方法设置了whenAmISet 成员变量的值为：<code>set in preProcess()</code>。</p>

<p>当然，上面的结论是错误的。如果你编译并运行这个程序，你会发现，程序实际输出的是<code>set when declared</code>。怎么为这样呢？难道是基类Base 的preProcess() 方法被调用啦？也不是！你可以在基类的preProcess中输出点什么看看，你会发现程序运行时，<strong>Base.preProcess()</strong> 并没有被调用到（不然这对于Java所有的应用程序将会是一个极具灾难性的Bug）</p>

<p>虽然上面的结论是错误的，但推导过程是合理的，只是不完整，下面是整个运行的流程：</p>

<pre><code>1. 进入 Derived 构造函数
2. Derived 成员变量的内存被分配
3. Base 构造函数被隐含的调用
4. Base 构造函数调用 preProcess()
5. Derived 的 preProcess() 设置 whenAmISet 值为"set in preProcess()"
6. Derived 的成员变量初始化被调用
7. 执行 Dervied 构造函数体
</code></pre>

<p>等一等，这怎么可能？在第6步，<strong>Derived</strong> 成员的初始化居然在 <strong>preProcess()</strong> 调用之后？<br/>
是的，正是这样，我们不能让成员变量的声明和初始化变成一个原子操作，虽然在Java中我们可以把其写在一起，让其看上去像是声明和初始化一体。<strong>但这只是假象，我们的错误就在于我们把Java中的声明和初始化看成了一体</strong> 。在C++的世界中，C++并不支持成员变量在声明的时候进行初始化，其需要你在构造函数中显式的初始化其成员变量的值，看起来很土，但其实C++用心良苦。</p>

<p>在面向对象的世界中，因为程序以对象的形式出现，导致了我们对程序执行的顺序雾里看花。<strong>所以，在面向对象的世界中，程序执行的顺序相当的重要</strong> 。</p>

<p>下面是对上面各个步骤的逐条解释:</p>

<pre><code>1. 进入构造函数。
2. 为成员变量分配内存。
3. 除非你显式地调用super()，否则Java 会在子类的构造函数最前面偷偷地插入super() 。
4. 调用父类构造函数。
5. 调用preProcess，因为被子类override，所以调用的是子类的。
6. 于是，初始化发生在了preProcess()之后。  
   这是因为，Java需要保证父类的初始化早于子类的成员初始化，否则，在子类中使用父类的成员变量就会出现问题。
7. 正式执行子类的构造函数（当然这是一个空函数，居然我们没有声明）。
</code></pre>

<p>你可以查看 <a href="http://java.sun.com/docs/books/jls/third_edition/html/execution.html#12.5," title="相关章节">《Java语言的规格说明书》</a> 来了解更多的Java创建对象时的细节。<br/>
C++的程序员应该都知道，在C++的世界中在<code>构造函数中调用虚函数</code>是不行的，Effective C++ 条款9：Never call virtual functions during construction or destruction，Scott Meyers已经解释得很详细了。</p>

<p>在语言设计的时候，<strong>“在构造函数中调用虚函数”</strong>是个两难的问题:</p>

<pre><code>1. 如果调用的是父类的函数的话，这个有点违反虚函数的定义。  
2. 如果调用的是子类的函数的话，这可能产生问题的：
     因为在构造子类对象的时候，首先调用父类的构造函数,而这时候如果去调用子类的函数  
     由于子类还没有构造完成，子类的成员尚未初始化，这么做显然是不安全的。
</code></pre>

<p>C++选择了第一种，而Java选择了第二种。</p>

<pre><code>C++类的设计相对比较简陋，通过虚函数表来实现，缺少类的元信息。
而Java类的则显得比较完整，有super指针来导航到父类。
</code></pre>

<p>最后，需要向大家推荐一本书，Joshua Bloch 和 Neal Gafter 写的 <code>Java Puzzlers: Traps, Pitfalls, and Corner Cases</code> ，中文版<code>《JAVA解惑 》</code>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello Octopress,在windwow平台下自己动手搭建一个GitHub Blog!]]></title>
    <link href="http://chenming142.github.com/blog/2013/03/07/hello-octopress/"/>
    <updated>2013-03-07T11:08:00+08:00</updated>
    <id>http://chenming142.github.com/blog/2013/03/07/hello-octopress</id>
    <content type="html"><![CDATA[<blockquote><p><code>github</code>本身不仅作为代码共享仓库，并且支持<code>github-pages</code>功能，而<code>octopress</code>就是在这样的环境下诞生的博客系统.</p></blockquote>

<h4>需要安装的软件</h4>

<pre><code>1. git
2. ruby(或者说rubyinstaller, 版本号须 &gt;= 1.9.2)
3. DevKit(windows平台下编译和使用本地C/C++扩展包的工具,即用来模拟Linux平台下的make,gcc,sh命令来进行编译)
4. python(支持代码高亮) 
</code></pre>

<h6>关于 github 值得说说的事情</h6>

<ol>
<li>先注册一个github账号和创建一个repos<br/>
 创建一个新的Repository.这里必须重视,若想是博客首页是http://yourname.github.com,则Repositoty的project name就必须是<strong>yourname.github.com</strong>.</li>
<li>设置SH Keys
 履行<code>ssh-keygen -t rsa -C “your_email＠youremail.com”</code>，回车;然后输入两遍暗码.
 到c:\Users\用户名.ssh\目次找到id_rsa.pub，并用文本软件打开复制全部(目录是隐藏的)</li>
<li>将SSH Key添加到GitHub
 到github网站选择“Account Settings”>>“SSH Public Keys”>>“Add another public key”，将刚才复制的内容粘贴到key文本框内</li>
<li>测试<br/>
 为确保设置成功，现在可以测试设置成果啦。记住，”<strong>git@github.com</strong>”是默认的，无需修改

<pre><code> $ ssh -T git@github.com  （也可以用 SSH -v git@github.com ）
</code></pre></li>
<li>设置个人信息 <br/>
 你已经成功安装Git，并设置好SSH Keys，现在设置个人信息： <br/>
 设置用户名和电子邮件

<pre><code> $ git config --global user.name "Firstname Lastname"
 $ git config --global user.email "youremail@youremail.com"
</code></pre>

<p>如果你的~/目录下生成了 .gitconfig文件,即说明配置成功!你可以打开看看,是否是你配置的信息.OK,就说这么多了.</p></li>
</ol>


<h4>搭建ruby环境和配置工具</h4>

<p>依次安装<code>git</code>,<code>rubyinstaller</code>和<code>python</code>,建议最好安装在C盘(系统盘)下,并把相应路径加入系统环境变量中,以避免不必要的错误。之后进入cmd窗口或git窗口来安装DevKit,解压DevKit,比如C:/DevKit,然后执行如下命令:</p>

<pre><code>c:                          #进入c盘
cd c:/DevKit  
ruby -v                     #此命令为了验证 ruby 是否正确安装              
ruby dk.rb init             #执行该命令时,可能出现编码错误!    
                            #可能是你在系统环境变量中提前设置了LANG=zh_CN.UTF-8和LC_ALL=zh_CN.UTF-8   
                            #此时应该先删除这两个环境变量,再执行该命令        
                            #此处的编码问题还可以使用 chcp 命令查询`活动代码页`序号,936 : 简体中文 
ruby dk.rb install
</code></pre>

<p>至此你都未出现任何错误的话,搭建成功!  <br/>
安装成功后,你可以想测试一下,那么可以使用如下命令:</p>

<pre><code>gem install rdiscount --platform=ruby
</code></pre>

<p>如果安装成功后,就可以使用一些<code>Ruby</code>的工具了,也为后面搭建博客提供了基础环境.但是也可能会给你带来麻烦,这个另说.</p>

<h4>配置本地编码环境</h4>

<p>Otcopress采用<code>UTF-8无BOM</code>编码格式,故使用其他格式可能产生不可预计的错误.配置本地window的编码格式:</p>

<pre><code>set LANG   = zh_CN.UTF-8
set LC_ALL = zh_CN.UTF-8
</code></pre>

<h4>下载并配置Octopress</h4>

<p>假设Octopress安装在<code>~/repos</code>下,在git或cmd下执行命令:</p>

<pre><code>cd repos                                                    #~表示git主目录,不存在repos则 mkdir
git clone git://github.com/imathis/octopress.git octopress  #octopress表示clone后所在的本地目录   
                                                            #没有即使用原项目名即 octopress
</code></pre>

<p>然后更新 Octopress的gem更新源:进入<code>~/repos/octopress</code>目录,用文本编辑器(如EditPlus)打开文件<code>Gemfile</code>,将里面<code>source "http://rubygems.org"</code>改为<code>source "http://ruby.taobao.org/"</code>.最后安装Octopress的依赖项,在git或cmd窗口输入命令:</p>

<pre><code>cd octopress                     #进入 octopress 目录
gem install bundler              #安装 bundler
bundle install                   #然后安装一些依赖的工具
</code></pre>

<p>如果安装一切没有,那么恭喜你,你已经完成了整个环境的搭建,接下来的真正的主角登场了.不过人生总有那么几件不如意的事,那么可能出现那些错误呢?我们来分析一下:</p>

<pre><code>问题    : bundle install时,总是提示某些包没有目录或找不到     
解决方法 : 找到 ~/repos/octopress/ 目录下打开 Gemfile.lock文件查看specs:下的依赖包的版本    
          对比 [ruby安装目录(c:\Ruby192)]/lib/ruby/gems/[可能的版本(1.9.1)]/gems下的包的名称      
          修改Gemfile.lock的版本即可.但是不要修改那些存在 &gt;= 的版本号(这就是我在第一步所说的麻烦) 
</code></pre>

<h4>在git@github.com上建立Repositories</h4>

<p>登录Github后,需要建立一个命名为<code>username.github.com</code>的Repo,这样命令的好处是,在运行命令<code>rake setpu_github_pages</code>能够自动创建<code>master</code>和<code>source</code>分支.创建(必须拥有github账号)如下图:<img src="http://chenming142.github.com/images/common/2013-03-07-hello-octopress/create_repos.jpg" title="create repository of github" alt="create repository" /></p>

<h4>发布Octopress到Github</h4>

<p>进入git bash后,进入到Octopress所在目录,输入命令:</p>

<pre><code>rake setup_github_pages
</code></pre>

<p>按照提示输入刚才新建的Repos地址,类似:git@github.com:用户名/用户名.github.com</p>

<h4>Octopress设置</h4>

<pre><code>rake install           #安装octopress默认主题
rake generate          #产生静态网页
rake preview           #本地预览网站效果,在浏览器输入地址http://127.0.0.1:4000
</code></pre>

<p>人生不如意十有八九,以上三个命令看似简单,但有可能会成为拦路虎,而成为我们成功的绊脚石,让我们看看又会出现什么?</p>

<pre><code>rake generate失败
 1. 检查_config.yml，注意每个冒号后面都有空格
 2. 大多数原因是中文解析问题
      首先所有的markdown文件应为UTF-8格式，然后修改 你ruby安装目录下的convertible.rb：
      self.content = File.read(File.join(base, name))修改为
      self.content = File.read(File.join(base, name), :encoding =&gt; "UTF-8")

使用rake 命令遇到问题：       
     rake aborted! No Rakefile found (looking for: rakefile, Rakefile, rakefile.rb, Rakefile.rb) 
原因：没有进入工程目录
</code></pre>

<h4>发表文章</h4>

<p>以发表 Hello World的文章为例:</p>

<pre><code>rake new_post["Hello World"]   #将在 octopress主目录/source/_posts/目录下生成    
                                '年-月-日-hello-world.markdown'格式的文件   
</code></pre>

<p>.markdown文件可以用编辑软件打开,添加文章内容,具体用法参考<a href="http://wowubuntu.com/markdown/" title="markdown用法(中文版)">markdown用法(中文版)</a>和<a href="http://octopress.org/" title="octopress">octopress</a></p>

<h4>绑定域名</h4>

<p>github支持绑定独立域名,在<code>source/</code>目录下建立一个无扩展名的<code>CNAME</code>文件(文件名为CNAME),在里面写入域名:</p>

<pre><code>your_domain_name           # 用户名.github.com
</code></pre>

<h4>更新并发布</h4>

<pre><code>rake gen_deploy         #等同于 rake generate 和 rake deploy两个命令  
                        #此处有个坑爹的BUG,rake deploy时   
                          rake aborted!   
                          No such file or directory -public/_posts/...
                        #解决方法:在public目录下创建_posts目录然后执行rake deploy
</code></pre>

<h4>备份</h4>

<pre><code>git add *
git commit -a -m "your comment message"     #提交信息不能为空
git push origin source                      #把资源备份保存到 source 分支下[这里有个非常好的好处!]
git checkout master                         #切换回 master 分支
</code></pre>

<p>关于此备份,为什么需要备份? <br/>
博客文章部署到远程master分支下,然后将本地的所有源文件都git push 到source分支下,这样的话你可以在不同的地方都可以写blog.<br/>
只要你在写博客之前把source分支下的所有文件git pull 到本地即可,当然你的所有修改都必须在source分支体现(现在我还没有想到更好的方法,我只能在每次操作后都是<strong>先删除sourc分支,然后重建分支</strong>),如果有人知道好的方法或不认同该方法都可以<strong>chenming142@sina.com</strong>,谢谢!!</p>
]]></content>
  </entry>
  
</feed>
