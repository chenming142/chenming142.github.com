<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 与JavaScript相关 | chenming142's Blog for github]]></title>
  <link href="http://chenming142.github.com/blog/categories/yu-javascriptxiang-guan/atom.xml" rel="self"/>
  <link href="http://chenming142.github.com/"/>
  <updated>2013-03-31T03:18:00+08:00</updated>
  <id>http://chenming142.github.com/</id>
  <author>
    <name><![CDATA[Kevin Chen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[通用定时器|倒计时]]></title>
    <link href="http://chenming142.github.com/blog/2013/03/31/easytimer/"/>
    <updated>2013-03-31T01:14:00+08:00</updated>
    <id>http://chenming142.github.com/blog/2013/03/31/easytimer</id>
    <content type="html"><![CDATA[<blockquote><p>在一年之前我同事尚谦写了一个倒计时，那个倒计时其实功能上已经很完善了，而且在项目中实际应用效果也不错；今天拿出来整理一下，只为再练练手而已。</p></blockquote>

<h4>调用API</h4>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>JavaScript Syntax </span><a href='http://j.mp/pPUUmW'>MDN Documentation </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">_cfg</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;allTimes&#39;</span> <span class="o">:</span> <span class="mi">120</span><span class="p">,</span> <span class="nx">renderTo</span> <span class="o">:</span> <span class="s1">&#39;timer&#39;</span><span class="p">};</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">timer</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">EasyTimer</span><span class="p">(</span><span class="nx">_cfg</span><span class="p">);</span>
</span><span class='line'><span class="nx">timer</span><span class="p">.</span><span class="nx">start</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nx">_cfg</span> <span class="o">=</span><span class="p">{</span><span class="s1">&#39;allTimes&#39;</span> <span class="o">:</span> <span class="mi">40</span><span class="p">,</span> <span class="nx">renderTo</span> <span class="o">:</span> <span class="s1">&#39;timer1&#39;</span><span class="p">,</span> <span class="nx">format</span> <span class="o">:</span> <span class="s1">&#39;剩余{s}秒&#39;</span><span class="p">};</span>
</span><span class='line'>    <span class="k">new</span> <span class="nx">EasyTimer</span><span class="p">(</span><span class="nx">_cfg</span><span class="p">).</span><span class="nx">start</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nx">_cfg</span> <span class="o">=</span><span class="p">{</span><span class="s1">&#39;allTimes&#39;</span> <span class="o">:</span> <span class="mi">10</span><span class="p">,</span> <span class="nx">renderTo</span> <span class="o">:</span> <span class="s1">&#39;timer2&#39;</span><span class="p">,</span> <span class="nx">format</span> <span class="o">:</span> <span class="s1">&#39;剩余{s}秒&#39;</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:</span> <span class="kd">function</span><span class="p">(){</span><span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;我是timer2,我执行完毕了！&#39;</span><span class="p">);}};</span>
</span><span class='line'>    <span class="k">new</span> <span class="nx">EasyTimer</span><span class="p">(</span><span class="nx">_cfg</span><span class="p">).</span><span class="nx">start</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nx">_cfg</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;allTimes&#39;</span> <span class="o">:</span> <span class="mi">5</span><span class="p">,</span> <span class="nx">renderTo</span> <span class="o">:</span> <span class="s1">&#39;timer3&#39;</span><span class="p">,</span> <span class="nx">immediate</span><span class="o">:</span> <span class="kc">true</span><span class="p">};</span>
</span><span class='line'><span class="k">new</span> <span class="nx">EasyTimer</span><span class="p">(</span><span class="nx">_cfg</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">_cfg</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;allTimes&#39;</span> <span class="o">:</span> <span class="mi">125</span><span class="p">,</span> <span class="nx">renderTo</span> <span class="o">:</span> <span class="s1">&#39;timer4&#39;</span><span class="p">,</span> <span class="nx">direction</span> <span class="o">:</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">immediate</span><span class="o">:</span> <span class="kc">true</span><span class="p">};</span>
</span><span class='line'><span class="k">new</span> <span class="nx">EasyTimer</span><span class="p">(</span><span class="nx">_cfg</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h4>构造函数及参数说明</h4>

<pre><code>EasyTimer(_cfg) : 构造一个倒计时|定时器
_cfg = {
    allTimes : 0,  
    defaultFormat :  '{d}天{h}时{m}分{s}秒',
    renderTo : '',
    direction : ''
    immediate : false,
    ok : fn,
    callback : fn
} 
allTimes      ：定时器|倒计时的时间总秒数，默认为0
defaultFormat ：时间显示的格式，不传即显示上述默认格式
renderTo      ：时间显示的位置元素，必传参数
direction     ：定时器与倒计时类型区分{0 : 倒计时,1 : 定时器}
immediate     ：定时器与倒计时初始化后，是否自动执行
ok            ：定时器与倒计时完成后，调用函数
callback      ：定时器与倒计时间隔调用函数
isdebug       ：针对当前定时器与倒计时打印调试信息
</code></pre>

<!-- more -->


<h4>全部源码</h4>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>JavaScript Syntax </span><a href='http://j.mp/pPUUmW'>MDN Documentation </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">global</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">function</span> <span class="nx">EasyTimer</span><span class="p">(</span><span class="nx">_cfg</span><span class="p">){</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">defaultConfig</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">allTimes</span> <span class="o">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>            <span class="nx">day</span>  <span class="o">:</span> <span class="s1">&#39;timer_day&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">hour</span> <span class="o">:</span> <span class="s1">&#39;timer_hour&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">minu</span> <span class="o">:</span> <span class="s1">&#39;timer_minu&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">sec</span>  <span class="o">:</span> <span class="s1">&#39;timer_sec&#39;</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>            <span class="nx">interval</span> <span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">defaultFormat</span> <span class="o">:</span>  <span class="s1">&#39;{d}天{h}时{m}分{s}秒&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">set</span> <span class="o">:</span> <span class="p">{</span><span class="s1">&#39;s&#39;</span> <span class="o">:</span> <span class="mi">59</span><span class="p">,</span> <span class="s1">&#39;m&#39;</span> <span class="o">:</span> <span class="mi">59</span><span class="p">,</span> <span class="s1">&#39;h&#39;</span> <span class="o">:</span> <span class="mi">23</span><span class="p">},</span>
</span><span class='line'>            <span class="nx">direction</span> <span class="o">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">immediate</span> <span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">ok</span> <span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">callback</span> <span class="o">:</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">cfg</span>       <span class="o">=</span> <span class="nx">mix</span><span class="p">(</span><span class="nx">defaultConfig</span><span class="p">,</span> <span class="nx">_cfg</span><span class="p">);</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">allTimes</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">cfg</span><span class="p">.</span><span class="nx">allTimes</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">defaultFormat</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span> <span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">cfg</span><span class="p">.</span><span class="nx">format</span> <span class="p">){</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">format</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">cfg</span><span class="p">.</span><span class="nx">defaultFormat</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">defaultFormat</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">format</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">cfg</span><span class="p">.</span><span class="nx">format</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span> <span class="k">this</span><span class="p">.</span><span class="nx">cfg</span><span class="p">.</span><span class="nx">renderTo</span> <span class="p">){</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">renderTo</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">cfg</span><span class="p">.</span><span class="nx">renderTo</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;参数中，缺少定时器|倒计时的render元素&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="k">return</span> <span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">day</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">hour</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">minu</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">sec</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">interval</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">cfg</span><span class="p">.</span><span class="nx">interval</span><span class="p">;</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">over</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">direction</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">cfg</span><span class="p">.</span><span class="nx">direction</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">ok</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">cfg</span><span class="p">.</span><span class="nx">ok</span><span class="p">;</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">callback</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">cfg</span><span class="p">.</span><span class="nx">callback</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">invoke</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){};</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">init</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">EasyTimer</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">init</span> <span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">allTimes</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">allTimes</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">allTimes</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="nb">parseInt</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">allTimes</span><span class="p">,</span> <span class="mi">10</span><span class="p">);</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span> <span class="k">this</span><span class="p">.</span><span class="nx">cfg</span><span class="p">.</span><span class="nx">immediate</span> <span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">start</span><span class="p">();</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">initTimer</span><span class="p">(</span> <span class="k">this</span><span class="p">.</span><span class="nx">direction</span> <span class="p">);</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">showTime</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nx">initTimer</span> <span class="o">:</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">direction</span> <span class="p">){</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">allTimes</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">allTimes</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span> <span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">direction</span> <span class="p">){</span>
</span><span class='line'>                <span class="k">if</span><span class="p">(</span> <span class="nx">allTimes</span> <span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="mi">0</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="nx">allTimes</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="mi">60</span> <span class="p">){</span>
</span><span class='line'>                    <span class="k">this</span><span class="p">.</span><span class="nx">sec</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">allTimes</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>                    <span class="k">this</span><span class="p">.</span><span class="nx">day</span> <span class="o">=</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">allTimes</span> <span class="o">/</span> <span class="mi">86400</span><span class="p">,</span> <span class="mi">10</span><span class="p">);</span>
</span><span class='line'>                    <span class="nx">allTimes</span> <span class="o">%=</span> <span class="mi">86400</span><span class="p">;</span>
</span><span class='line'>                    <span class="k">this</span><span class="p">.</span><span class="nx">hour</span> <span class="o">=</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">allTimes</span> <span class="o">/</span> <span class="mi">3600</span><span class="p">,</span> <span class="mi">10</span><span class="p">);</span>
</span><span class='line'>                    <span class="nx">allTimes</span> <span class="o">%=</span> <span class="mi">3600</span><span class="p">;</span>
</span><span class='line'>                    <span class="k">this</span><span class="p">.</span><span class="nx">minu</span> <span class="o">=</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">allTimes</span> <span class="o">/</span> <span class="mi">60</span><span class="p">,</span> <span class="mi">10</span><span class="p">);</span>
</span><span class='line'>                    <span class="nx">allTimes</span> <span class="o">%=</span> <span class="mi">60</span>
</span><span class='line'>                    <span class="k">this</span><span class="p">.</span><span class="nx">sec</span> <span class="o">=</span> <span class="nx">allTimes</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>                <span class="k">this</span><span class="p">.</span><span class="nx">maxDay</span> <span class="o">=</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">allTimes</span> <span class="o">/</span> <span class="mi">86400</span><span class="p">,</span> <span class="mi">10</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">invoke</span> <span class="o">=</span> <span class="p">(</span> <span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">direction</span> <span class="p">)</span> <span class="o">?</span>
</span><span class='line'>                <span class="kd">function</span> <span class="p">(){</span>
</span><span class='line'>                    <span class="kd">var</span> <span class="nx">el</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>                    <span class="k">return</span> <span class="nx">arguments</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">-</span> <span class="nx">el</span><span class="p">.</span><span class="nx">interval</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span> <span class="o">:</span>
</span><span class='line'>                <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>                    <span class="kd">var</span> <span class="nx">el</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>                    <span class="k">return</span> <span class="nx">arguments</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="nx">el</span><span class="p">.</span><span class="nx">interval</span><span class="p">;</span>
</span><span class='line'>            <span class="p">};</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nx">start</span> <span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span> <span class="k">this</span><span class="p">.</span><span class="nx">allTimes</span> <span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>                <span class="k">this</span><span class="p">.</span><span class="nx">startTimeCount</span><span class="p">();</span>
</span><span class='line'>            <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>                <span class="k">this</span><span class="p">.</span><span class="nx">over</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nx">startTimeCount</span> <span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">el</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>            <span class="nb">window</span><span class="p">.</span><span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>                <span class="nx">el</span><span class="p">.</span><span class="nx">timeCount</span><span class="p">();</span>
</span><span class='line'>            <span class="p">},</span> <span class="k">this</span><span class="p">.</span><span class="nx">interval</span> <span class="o">*</span> <span class="mi">1000</span><span class="p">);</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nx">timeCount</span> <span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">updateSec</span><span class="p">();</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span> <span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">over</span> <span class="p">){</span>
</span><span class='line'>                <span class="k">this</span><span class="p">.</span><span class="nx">startTimeCount</span><span class="p">();</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nx">reset</span> <span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">direction</span><span class="p">,</span> <span class="nx">e</span><span class="p">){</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">set</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">cfg</span><span class="p">.</span><span class="nx">set</span><span class="p">;</span>
</span><span class='line'>            <span class="k">return</span> <span class="p">(</span> <span class="o">!</span><span class="nx">direction</span> <span class="p">)</span> <span class="o">?</span> <span class="nx">set</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span> <span class="o">:</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nx">checkNext</span> <span class="o">:</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">direction</span> <span class="p">,</span> <span class="nx">val</span><span class="p">,</span> <span class="nx">e</span> <span class="p">){</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">set</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">cfg</span><span class="p">.</span><span class="nx">set</span><span class="p">;</span>
</span><span class='line'>            <span class="k">return</span> <span class="p">(</span> <span class="o">!</span><span class="nx">direction</span> <span class="p">)</span> <span class="o">?</span> <span class="nx">val</span> <span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="mi">0</span> <span class="o">:</span> <span class="nx">val</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">set</span><span class="p">[</span><span class="nx">e</span><span class="p">];</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nx">updateSec</span> <span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">next</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">checkNext</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">direction</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">sec</span><span class="p">,</span> <span class="s1">&#39;s&#39;</span><span class="p">);</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span> <span class="nx">next</span> <span class="p">){</span>
</span><span class='line'>                <span class="k">this</span><span class="p">.</span><span class="nx">sec</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">invoke</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">sec</span><span class="p">)</span> <span class="p">;</span>
</span><span class='line'>            <span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span> <span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">over</span> <span class="p">){</span>
</span><span class='line'>                <span class="k">this</span><span class="p">.</span><span class="nx">sec</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">reset</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">direction</span><span class="p">,</span> <span class="s1">&#39;s&#39;</span><span class="p">);</span>
</span><span class='line'>                <span class="k">this</span><span class="p">.</span><span class="nx">updateMinu</span><span class="p">();</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">checkOver</span><span class="p">();</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">showTime</span><span class="p">(</span><span class="s1">&#39;s&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nx">updateMinu</span> <span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">next</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">checkNext</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">direction</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">minu</span><span class="p">,</span> <span class="s1">&#39;m&#39;</span><span class="p">);</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span> <span class="nx">next</span> <span class="p">){</span>
</span><span class='line'>                <span class="k">this</span><span class="p">.</span><span class="nx">minu</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">invoke</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">minu</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span> <span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">over</span> <span class="p">){</span>
</span><span class='line'>                <span class="k">this</span><span class="p">.</span><span class="nx">minu</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">reset</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">direction</span><span class="p">,</span> <span class="s1">&#39;m&#39;</span><span class="p">);</span>
</span><span class='line'>                <span class="k">this</span><span class="p">.</span><span class="nx">updateHour</span><span class="p">();</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">showTime</span><span class="p">(</span><span class="s1">&#39;m&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nx">updateHour</span> <span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">next</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">checkNext</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">direction</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">hour</span><span class="p">,</span> <span class="s1">&#39;h&#39;</span><span class="p">);;</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span> <span class="nx">next</span> <span class="p">){</span>
</span><span class='line'>                <span class="k">this</span><span class="p">.</span><span class="nx">hour</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">invoke</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">hour</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span> <span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">over</span> <span class="p">){</span>
</span><span class='line'>                <span class="k">this</span><span class="p">.</span><span class="nx">hour</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">reset</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">direction</span><span class="p">,</span> <span class="s1">&#39;h&#39;</span><span class="p">);</span>
</span><span class='line'>                <span class="k">this</span><span class="p">.</span><span class="nx">updateDay</span><span class="p">();</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">showTime</span><span class="p">(</span><span class="s1">&#39;h&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nx">updateDay</span> <span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">day</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">day</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">next</span> <span class="o">=</span> <span class="p">(</span> <span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">direction</span> <span class="p">)</span> <span class="o">?</span> <span class="nx">day</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="k">this</span><span class="p">.</span><span class="nx">maxDay</span> <span class="o">:</span> <span class="nx">day</span> <span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span> <span class="nx">next</span> <span class="p">){</span>
</span><span class='line'>                <span class="k">this</span><span class="p">.</span><span class="nx">day</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">invoke</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">day</span><span class="p">);</span>
</span><span class='line'>                <span class="k">this</span><span class="p">.</span><span class="nx">showTime</span><span class="p">(</span><span class="s1">&#39;d&#39;</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nx">ctinue</span> <span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">over</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">startTimeCount</span><span class="p">();</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nx">stop</span> <span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">clear</span><span class="p">){</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span> <span class="nx">clear</span> <span class="p">){</span>
</span><span class='line'>                <span class="k">this</span><span class="p">.</span><span class="nx">day</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">hour</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">minu</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">sec</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>                <span class="k">this</span><span class="p">.</span><span class="nx">showTime</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">);</span>
</span><span class='line'>                <span class="k">this</span><span class="p">.</span><span class="nx">pause</span><span class="p">();</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nx">pause</span> <span class="o">:</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">over</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nx">checkOver</span> <span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">el</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">allTimes</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">allTimes</span> <span class="o">-</span> <span class="k">this</span><span class="p">.</span><span class="nx">interval</span><span class="p">;</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">over</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">allTimes</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">=</span> <span class="mi">0</span> <span class="o">?</span> <span class="kc">true</span> <span class="o">:</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>            <span class="c1">// TODO : 定时器完成方法调用</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">over</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="nx">isFunction</span><span class="p">(</span><span class="nx">el</span><span class="p">.</span><span class="nx">ok</span><span class="p">)){</span>
</span><span class='line'>                <span class="k">this</span><span class="p">.</span><span class="nx">ok</span><span class="p">();</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="c1">// TODO : 定时器间隔方法调用</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span> <span class="k">this</span><span class="p">.</span><span class="nx">callback</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="nx">isFunction</span><span class="p">(</span><span class="nx">el</span><span class="p">.</span><span class="nx">callback</span><span class="p">)</span> <span class="p">){</span>
</span><span class='line'>                <span class="k">this</span><span class="p">.</span><span class="nx">callback</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nx">showTime</span> <span class="o">:</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">type</span> <span class="p">){</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">el</span> <span class="o">=</span> <span class="k">this</span><span class="p">,</span> <span class="nx">split</span> <span class="o">=</span>  <span class="p">(</span> <span class="nx">el</span><span class="p">.</span><span class="nx">format</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="sr">/\{\w\}/g</span><span class="p">).</span><span class="nx">length</span> <span class="o">-</span><span class="mi">1</span> <span class="p">)</span> <span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span> <span class="k">this</span><span class="p">.</span><span class="nx">defaultFormat</span> <span class="o">||</span> <span class="nx">split</span><span class="p">){</span>
</span><span class='line'>                <span class="k">try</span><span class="p">{</span>
</span><span class='line'>                    <span class="nx">getElement</span><span class="p">(</span><span class="nx">el</span><span class="p">.</span><span class="nx">renderTo</span><span class="p">).</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="nx">format</span><span class="p">(</span><span class="nx">el</span><span class="p">.</span><span class="nx">format</span><span class="p">,</span> <span class="p">{</span><span class="nx">d</span> <span class="o">:</span> <span class="nx">el</span><span class="p">.</span><span class="nx">day</span><span class="p">,</span> <span class="nx">h</span> <span class="o">:</span> <span class="nx">el</span><span class="p">.</span><span class="nx">hour</span><span class="p">,</span> <span class="nx">m</span> <span class="o">:</span> <span class="nx">el</span><span class="p">.</span><span class="nx">minu</span><span class="p">,</span> <span class="nx">s</span> <span class="o">:</span> <span class="nx">el</span><span class="p">.</span><span class="nx">sec</span><span class="p">});</span>
</span><span class='line'>                    <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">cfg</span><span class="p">.</span><span class="nx">debug</span><span class="p">){</span>
</span><span class='line'>                        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;格式化结果是:&#39;</span>
</span><span class='line'>                            <span class="o">+</span><span class="nx">format</span><span class="p">(</span><span class="nx">el</span><span class="p">.</span><span class="nx">format</span><span class="p">,</span> <span class="p">{</span><span class="nx">d</span> <span class="o">:</span> <span class="nx">el</span><span class="p">.</span><span class="nx">day</span><span class="p">,</span> <span class="nx">h</span> <span class="o">:</span> <span class="nx">el</span><span class="p">.</span><span class="nx">hour</span><span class="p">,</span> <span class="nx">m</span> <span class="o">:</span> <span class="nx">el</span><span class="p">.</span><span class="nx">minu</span><span class="p">,</span> <span class="nx">s</span> <span class="o">:</span> <span class="nx">el</span><span class="p">.</span><span class="nx">sec</span><span class="p">})</span>
</span><span class='line'>                            <span class="o">+</span><span class="s2">&quot;---传入的参数是{ d:&quot;</span><span class="o">+</span><span class="nx">el</span><span class="p">.</span><span class="nx">day</span> <span class="o">+</span><span class="s1">&#39;, h:&#39;</span><span class="o">+</span> <span class="nx">el</span><span class="p">.</span><span class="nx">hour</span> <span class="o">+</span><span class="s1">&#39;, m:&#39;</span> <span class="o">+</span> <span class="nx">el</span><span class="p">.</span><span class="nx">minu</span> <span class="o">+</span><span class="s1">&#39;, s:&#39;</span><span class="o">+</span> <span class="nx">el</span><span class="p">.</span><span class="nx">sec</span> <span class="o">+</span><span class="s1">&#39;}&#39;</span><span class="p">);</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                <span class="p">}</span><span class="k">catch</span> <span class="p">(</span><span class="nx">err</span><span class="p">){</span>
</span><span class='line'>                    <span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;更新时间出错，异常类型是&#39;</span><span class="o">+</span> <span class="nx">err</span><span class="p">.</span><span class="nx">name</span> <span class="o">+</span><span class="s1">&#39;错误信息是：&#39;</span><span class="o">+</span><span class="nx">err</span><span class="p">.</span><span class="nx">message</span><span class="p">);</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>                <span class="kd">var</span> <span class="nx">origin</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>                    <span class="nx">d</span> <span class="o">:</span> <span class="p">[</span><span class="nx">el</span><span class="p">.</span><span class="nx">cfg</span><span class="p">.</span><span class="nx">day</span><span class="p">,</span> <span class="nx">el</span><span class="p">.</span><span class="nx">day</span><span class="p">],</span>
</span><span class='line'>                    <span class="nx">h</span> <span class="o">:</span> <span class="p">[</span><span class="nx">el</span><span class="p">.</span><span class="nx">cfg</span><span class="p">.</span><span class="nx">hour</span><span class="p">,</span> <span class="nx">el</span><span class="p">.</span><span class="nx">hour</span><span class="p">],</span>
</span><span class='line'>                    <span class="nx">m</span> <span class="o">:</span> <span class="p">[</span><span class="nx">el</span><span class="p">.</span><span class="nx">cfg</span><span class="p">.</span><span class="nx">minu</span><span class="p">,</span> <span class="nx">el</span><span class="p">.</span><span class="nx">minu</span><span class="p">],</span>
</span><span class='line'>                    <span class="nx">s</span> <span class="o">:</span> <span class="p">[</span><span class="nx">el</span><span class="p">.</span><span class="nx">cfg</span><span class="p">.</span><span class="nx">sec</span><span class="p">,</span> <span class="nx">el</span><span class="p">.</span><span class="nx">sec</span><span class="p">]</span>
</span><span class='line'>                <span class="p">};</span>
</span><span class='line'>                <span class="k">if</span><span class="p">(</span><span class="nx">origin</span><span class="p">[</span><span class="nx">type</span><span class="p">]){</span>
</span><span class='line'>                    <span class="nx">getElement</span><span class="p">(</span><span class="nx">origin</span><span class="p">[</span><span class="nx">type</span><span class="p">][</span><span class="mi">0</span><span class="p">]).</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="nx">padZero</span><span class="p">(</span><span class="nx">origin</span><span class="p">[</span><span class="nx">type</span><span class="p">][</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>                <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>                    <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">p</span> <span class="k">in</span> <span class="nx">origin</span><span class="p">){</span>
</span><span class='line'>                        <span class="k">if</span><span class="p">(</span> <span class="nx">origin</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="nx">p</span><span class="p">)){</span>
</span><span class='line'>                            <span class="nx">getElement</span><span class="p">(</span><span class="nx">origin</span><span class="p">[</span><span class="nx">p</span><span class="p">][</span><span class="mi">0</span><span class="p">]).</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="nx">padZero</span><span class="p">(</span><span class="nx">origin</span><span class="p">[</span><span class="nx">p</span><span class="p">][</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>                        <span class="p">}</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="c1">// Helpers</span>
</span><span class='line'>    <span class="c1">// --------------------------------------------------------------------------</span>
</span><span class='line'>    <span class="kd">function</span> <span class="nx">mix</span><span class="p">(</span><span class="nx">r</span><span class="p">,</span> <span class="nx">s</span><span class="p">,</span> <span class="nx">wl</span><span class="p">){</span>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">p</span> <span class="k">in</span> <span class="nx">s</span><span class="p">){</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span> <span class="nx">s</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="nx">p</span><span class="p">)</span> <span class="p">){</span>
</span><span class='line'>                <span class="k">if</span><span class="p">(</span> <span class="nx">wl</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="nx">indexOf</span><span class="p">(</span><span class="nx">wl</span><span class="p">,</span> <span class="nx">p</span><span class="p">)</span> <span class="o">===</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="k">continue</span><span class="p">;</span>
</span><span class='line'>                <span class="k">if</span><span class="p">(</span> <span class="nx">p</span> <span class="o">!==</span> <span class="s1">&#39;prototype&#39;</span> <span class="p">){</span>
</span><span class='line'>                    <span class="nx">r</span><span class="p">[</span><span class="nx">p</span><span class="p">]</span> <span class="o">=</span> <span class="nx">s</span><span class="p">[</span><span class="nx">p</span><span class="p">];</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">r</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">toString</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">toString</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">isFunction</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">val</span> <span class="p">){</span>
</span><span class='line'>        <span class="c1">//console.log(&#39;val===&#39;+ val.toSource() +&#39;,是否是函数：&#39;+(toString.call( val ) === &#39;[object Function]&#39;));</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">toString</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span> <span class="nx">val</span> <span class="p">)</span> <span class="o">===</span> <span class="s1">&#39;[object Function]&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">arrProto</span> <span class="o">=</span> <span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">indexOf</span> <span class="o">=</span> <span class="nx">arrProto</span><span class="p">.</span><span class="nx">indexOf</span> <span class="o">?</span>
</span><span class='line'>            <span class="kd">function</span><span class="p">(</span> <span class="nx">arr</span><span class="p">,</span> <span class="nx">item</span> <span class="p">){</span>
</span><span class='line'>                <span class="k">return</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">item</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span> <span class="o">:</span>
</span><span class='line'>            <span class="kd">function</span><span class="p">(</span> <span class="nx">arr</span><span class="p">,</span> <span class="nx">item</span> <span class="p">){</span>
</span><span class='line'>                <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">len</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">len</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>                    <span class="k">if</span><span class="p">(</span> <span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">===</span> <span class="nx">item</span> <span class="p">){</span>
</span><span class='line'>                        <span class="k">return</span> <span class="nx">i</span><span class="p">;</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>            <span class="p">};</span>
</span><span class='line'>    <span class="kd">function</span> <span class="nx">format</span><span class="p">(</span> <span class="nx">origin</span> <span class="p">){</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">args</span> <span class="o">=</span> <span class="nx">arrProto</span><span class="p">.</span><span class="nx">slice</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">arguments</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">REG_FORMAT_TOKEN</span> <span class="o">=</span> <span class="sr">/\{(\w)\}/g</span><span class="p">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">origin</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="nx">REG_FORMAT_TOKEN</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">m</span><span class="p">,</span> <span class="nx">i</span> <span class="p">){</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">args</span><span class="p">[</span> <span class="mi">0</span> <span class="p">][</span> <span class="nx">i</span> <span class="p">]</span> <span class="o">?</span> <span class="nx">padZero</span><span class="p">(</span><span class="nx">args</span><span class="p">[</span> <span class="mi">0</span> <span class="p">][</span> <span class="nx">i</span> <span class="p">])</span> <span class="o">:</span> <span class="s1">&#39;00&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="kd">function</span> <span class="nx">padZero</span><span class="p">(</span><span class="nx">num</span><span class="p">,</span> <span class="nx">len</span><span class="p">,</span> <span class="nx">pos</span><span class="p">){</span>
</span><span class='line'>        <span class="nx">len</span> <span class="o">=</span> <span class="nx">len</span> <span class="o">||</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="nx">num</span><span class="p">.</span><span class="nx">toString</span><span class="p">().</span><span class="nx">length</span> <span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="o">=</span> <span class="nx">len</span><span class="p">){</span><span class="k">return</span> <span class="nx">num</span><span class="p">;}</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span> <span class="nx">pos</span> <span class="p">){</span>
</span><span class='line'>           <span class="k">return</span>  <span class="nx">padZero</span><span class="p">(</span> <span class="nx">num</span> <span class="o">+</span> <span class="s1">&#39;0&#39;</span><span class="p">,</span> <span class="nx">len</span><span class="p">,</span> <span class="nx">pos</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">padZero</span><span class="p">(</span> <span class="s1">&#39;0&#39;</span> <span class="o">+</span> <span class="nx">num</span> <span class="p">,</span> <span class="nx">len</span><span class="p">,</span> <span class="nx">pos</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="kd">function</span> <span class="nx">getElement</span><span class="p">(</span> <span class="nx">elemStr</span> <span class="p">){</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">elem</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">elem</span> <span class="o">=</span> <span class="nx">elemStr</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="s1">&#39;0&#39;</span><span class="p">)</span> <span class="o">===</span> <span class="s1">&#39;#&#39;</span>
</span><span class='line'>            <span class="o">?</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="nx">elemStr</span><span class="p">.</span><span class="nx">substring</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span> <span class="o">:</span> <span class="nx">elemStr</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">)</span> <span class="o">===</span> <span class="s1">&#39;.&#39;</span> <span class="o">?</span>
</span><span class='line'>                <span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByClassName</span><span class="p">(</span><span class="nx">elemStr</span><span class="p">.</span><span class="nx">substring</span><span class="p">(</span><span class="mi">1</span><span class="p">))[</span><span class="mi">0</span><span class="p">]</span> <span class="o">:</span>
</span><span class='line'>            <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="nx">elemStr</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">elem</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">global</span><span class="p">.</span><span class="nx">EasyTimer</span> <span class="o">=</span> <span class="nx">EasyTimer</span><span class="p">;</span>
</span><span class='line'><span class="p">})(</span><span class="k">this</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript之OOP实现]]></title>
    <link href="http://chenming142.github.com/blog/2013/03/28/js-classify/"/>
    <updated>2013-03-28T23:16:00+08:00</updated>
    <id>http://chenming142.github.com/blog/2013/03/28/js-classify</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jQuery 数据类型详解]]></title>
    <link href="http://chenming142.github.com/blog/2013/03/17/jquery-type/"/>
    <updated>2013-03-17T15:31:00+08:00</updated>
    <id>http://chenming142.github.com/blog/2013/03/17/jquery-type</id>
    <content type="html"><![CDATA[<blockquote><p>ECMAScript中有5种基本数据类型:Undefined,Null,Boolean,Number和String.还有一种复杂数据类型——Object,Object本质上是由一组无序的名值对组成的.</p></blockquote>

<h3>typeof 操作符</h3>

<p>对一个值使用typeof操作符可能返回下列某个字符串:<br/>
"undefined" —— 如果这个值未定义<br/>
"boolean" —— 如果这个值是布尔值<br/>
"string" —— 如果这个值是字符串<br/>
"number" —— 如果这个值是数值<br/>
"object" —— 如果这个值是对象或null<br/>
"function" —— 如果这个值是函数</p>

<pre><code>注:typeof 操作符的操作数可以是变量,也可以是数值字面量.typeof是操作符而非函数.
</code></pre>

<!--more-->


<p></p>

<h3>使用库进行判断数据类型</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Javascript Array Syntax </span><a href='http://j.mp/pPUUmW'>MDN Documentation </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">$</span><span class="p">,</span> <span class="nx">S</span><span class="p">,</span> <span class="kc">undefined</span><span class="p">){</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">host</span> <span class="o">=</span> <span class="k">this</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">class2type</span> <span class="o">=</span> <span class="p">{},</span> <span class="c1">// [[Class]] -&amp;gt; type pairs</span>
</span><span class='line'>        <span class="nx">OP</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">toString</span> <span class="o">=</span> <span class="nx">OP</span><span class="p">.</span><span class="nx">toString</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">hasOwn</span> <span class="o">=</span> <span class="nx">OP</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">TRUE</span> <span class="o">=</span> <span class="kc">true</span><span class="p">,</span><span class="nx">FALSE</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">$</span> <span class="o">=</span> <span class="nx">host</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="p">(</span> <span class="nx">host</span><span class="p">[</span><span class="nx">$</span><span class="p">]</span> <span class="o">=</span> <span class="p">{}</span> <span class="p">)</span> <span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">hasEnumBug</span> <span class="o">=</span> <span class="o">!</span><span class="p">({</span><span class="nx">toString</span><span class="o">:</span><span class="mi">1</span><span class="p">}.</span><span class="nx">propertyIsEnumerable</span><span class="p">(</span><span class="s1">&#39;toString&#39;</span><span class="p">)),</span>
</span><span class='line'>        <span class="nx">emumProperties</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>            <span class="s1">&#39;hasOwnProperty&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="s1">&#39;isPrototypeOf&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="s1">&#39;propertyIsEnumerable&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="s1">&#39;toString&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="s1">&#39;toLocaleString&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="s1">&#39;valueOf&#39;</span>
</span><span class='line'>        <span class="p">],</span>
</span><span class='line'>        <span class="nx">meta</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>            <span class="cm">/**</span>
</span><span class='line'><span class="cm">             * Copies all the properties of s to r</span>
</span><span class='line'><span class="cm">             * @param r</span>
</span><span class='line'><span class="cm">             * @param s</span>
</span><span class='line'><span class="cm">             * @param ov</span>
</span><span class='line'><span class="cm">             * @param wl</span>
</span><span class='line'><span class="cm">             * @param deep</span>
</span><span class='line'><span class="cm">             * @return {*}</span>
</span><span class='line'><span class="cm">             */</span>
</span><span class='line'>            <span class="nx">mix</span> <span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">r</span><span class="p">,</span> <span class="nx">s</span><span class="p">,</span> <span class="nx">ov</span><span class="p">,</span> <span class="nx">wl</span><span class="p">,</span> <span class="nx">deep</span><span class="p">){</span>
</span><span class='line'>                <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">s</span> <span class="o">||</span> <span class="o">!</span><span class="nx">r</span><span class="p">){</span><span class="k">return</span> <span class="nx">r</span><span class="p">;}</span>
</span><span class='line'>                <span class="k">if</span><span class="p">(</span><span class="nx">ov</span> <span class="o">===</span> <span class="kc">undefined</span><span class="p">){</span><span class="nx">ov</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;}</span>
</span><span class='line'>                <span class="kd">var</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">p</span><span class="p">,</span> <span class="nx">len</span><span class="p">;</span>
</span><span class='line'>                <span class="k">if</span><span class="p">(</span><span class="nx">wl</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="p">(</span><span class="nx">len</span> <span class="o">=</span> <span class="nx">wl</span><span class="p">.</span><span class="nx">length</span><span class="p">)){</span>
</span><span class='line'>                    <span class="k">for</span><span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">len</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>                        <span class="nx">p</span> <span class="o">=</span> <span class="nx">wl</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
</span><span class='line'>                        <span class="k">if</span><span class="p">(</span> <span class="nx">p</span> <span class="k">in</span> <span class="nx">s</span><span class="p">){</span><span class="nx">_mix</span><span class="p">(</span><span class="nx">p</span><span class="p">,</span> <span class="nx">r</span><span class="p">,</span> <span class="nx">s</span><span class="p">,</span> <span class="nx">ov</span><span class="p">,</span> <span class="nx">deep</span><span class="p">);}</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>                    <span class="k">for</span><span class="p">(</span><span class="nx">p</span> <span class="k">in</span> <span class="nx">s</span><span class="p">){</span>
</span><span class='line'>                        <span class="nx">_mix</span><span class="p">(</span><span class="nx">p</span><span class="p">,</span> <span class="nx">r</span><span class="p">,</span> <span class="nx">s</span><span class="p">,</span> <span class="nx">ov</span><span class="p">,</span> <span class="nx">deep</span><span class="p">);</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                    <span class="k">if</span><span class="p">(</span><span class="nx">hasEnumBug</span><span class="p">){</span>
</span><span class='line'>                        <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">emumProperties</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                            <span class="nx">p</span> <span class="o">=</span> <span class="nx">emumProperties</span><span class="p">[</span><span class="nx">j</span><span class="p">];</span>
</span><span class='line'>                            <span class="k">if</span> <span class="p">(</span><span class="nx">ov</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="nx">hasOwn</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">s</span><span class="p">,</span> <span class="nx">p</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>                                <span class="nx">r</span><span class="p">[</span><span class="nx">p</span><span class="p">]</span> <span class="o">=</span> <span class="nx">s</span><span class="p">[</span><span class="nx">p</span><span class="p">];</span>
</span><span class='line'>                            <span class="p">}</span>
</span><span class='line'>                        <span class="p">}</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="k">return</span> <span class="nx">r</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nx">_mix</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">p</span><span class="p">,</span> <span class="nx">r</span><span class="p">,</span> <span class="nx">s</span><span class="p">,</span> <span class="nx">ov</span><span class="p">,</span> <span class="nx">deep</span><span class="p">){</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="nx">ov</span> <span class="o">||</span> <span class="o">!</span><span class="p">(</span><span class="nx">p</span> <span class="k">in</span> <span class="nx">r</span><span class="p">)){</span>
</span><span class='line'>                <span class="kd">var</span> <span class="nx">target</span> <span class="o">=</span> <span class="nx">r</span><span class="p">[</span><span class="nx">p</span><span class="p">],</span> <span class="nx">src</span> <span class="o">=</span> <span class="nx">s</span><span class="p">[</span><span class="nx">p</span><span class="p">];</span>
</span><span class='line'>                <span class="k">if</span><span class="p">(</span><span class="nx">target</span> <span class="o">===</span> <span class="nx">src</span><span class="p">){</span><span class="k">return</span> <span class="p">;}</span>
</span><span class='line'>                <span class="k">if</span><span class="p">(</span> <span class="nx">deep</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="nx">src</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="p">(</span><span class="nx">S</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">src</span><span class="p">))</span> <span class="p">){</span>
</span><span class='line'>                    <span class="kd">var</span> <span class="nx">clone</span> <span class="o">=</span> <span class="nx">target</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="p">(</span><span class="nx">S</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">target</span><span class="p">)</span> <span class="o">||</span> <span class="nx">S</span><span class="p">.</span><span class="nx">isPlainObject</span><span class="p">(</span><span class="nx">target</span><span class="p">))</span> <span class="o">?</span>
</span><span class='line'>                        <span class="nx">target</span> <span class="o">:</span>
</span><span class='line'>                        <span class="p">(</span> <span class="nx">S</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">src</span><span class="p">)</span> <span class="o">?</span> <span class="p">[]</span> <span class="o">:</span> <span class="p">{});</span>
</span><span class='line'>                    <span class="nx">r</span><span class="p">[</span><span class="nx">p</span><span class="p">]</span> <span class="o">=</span> <span class="nx">S</span><span class="p">.</span><span class="nx">mix</span><span class="p">(</span> <span class="nx">clone</span><span class="p">,</span> <span class="nx">src</span><span class="p">,</span> <span class="nx">ov</span><span class="p">,</span> <span class="kc">undefined</span><span class="p">);</span>
</span><span class='line'>                <span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span> <span class="nx">src</span> <span class="o">!==</span> <span class="kc">undefined</span> <span class="p">){</span>
</span><span class='line'>                    <span class="nx">r</span><span class="p">[</span><span class="nx">p</span><span class="p">]</span> <span class="o">=</span><span class="nx">s</span><span class="p">[</span><span class="nx">p</span><span class="p">];</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nx">seed</span> <span class="o">=</span> <span class="p">(</span> <span class="nx">host</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="nx">host</span><span class="p">[</span><span class="nx">S</span><span class="p">]</span> <span class="p">)</span> <span class="o">||</span> <span class="p">{};</span>
</span><span class='line'>    <span class="nx">S</span> <span class="o">=</span> <span class="nx">host</span><span class="p">[</span><span class="nx">S</span><span class="p">]</span> <span class="o">=</span> <span class="nx">meta</span><span class="p">.</span><span class="nx">mix</span><span class="p">(</span> <span class="nx">seed</span><span class="p">,</span> <span class="nx">meta</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * If the type of val is null, undefined, number, string, boolean, return true.</span>
</span><span class='line'><span class="cm">     * @param val</span>
</span><span class='line'><span class="cm">     * @return {Boolean}</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">function</span> <span class="nx">isValidParamValue</span><span class="p">(</span> <span class="nx">val</span> <span class="p">){</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">t</span> <span class="o">=</span> <span class="k">typeof</span> <span class="nx">val</span><span class="p">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">val</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="p">(</span> <span class="nx">t</span> <span class="o">!==</span> <span class="s1">&#39;object&#39;</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="nx">t</span> <span class="o">!==</span> <span class="s1">&#39;function&#39;</span> <span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">S</span><span class="p">.</span><span class="nx">mix</span><span class="p">(</span><span class="nx">KISSY</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">isNull</span> <span class="o">:</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">o</span> <span class="p">){</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">o</span> <span class="o">===</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nx">isUndefined</span> <span class="o">:</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">o</span> <span class="p">){</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">o</span> <span class="o">===</span> <span class="kc">undefined</span><span class="p">;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nx">isEmptyObject</span> <span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">obj</span><span class="p">){</span>
</span><span class='line'>            <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">name</span> <span class="k">in</span> <span class="nx">obj</span><span class="p">){</span>
</span><span class='line'>                <span class="k">if</span><span class="p">(</span> <span class="nx">name</span> <span class="o">!==</span> <span class="kc">undefined</span> <span class="p">){</span>
</span><span class='line'>                    <span class="k">return</span> <span class="nx">FALSE</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">TRUE</span><span class="p">;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nx">isPlainObject</span> <span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">o</span><span class="p">){</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">o</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="nx">toString</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">o</span><span class="p">)</span> <span class="o">===</span> <span class="s1">&#39;[object Object]&#39;</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="s1">&#39;isPrototypeOf&#39;</span> <span class="k">in</span> <span class="nx">o</span><span class="p">;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nx">type</span> <span class="o">:</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">o</span> <span class="p">){</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">o</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">?</span>
</span><span class='line'>                <span class="nb">String</span><span class="p">(</span> <span class="nx">o</span> <span class="p">)</span> <span class="o">:</span> <span class="nx">class2type</span><span class="p">[</span> <span class="nx">toString</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">o</span><span class="p">)</span> <span class="p">]</span> <span class="o">||</span> <span class="s2">&quot;object&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nx">each</span> <span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">object</span><span class="p">,</span> <span class="nx">fn</span><span class="p">,</span> <span class="nx">context</span><span class="p">){</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span> <span class="nx">object</span> <span class="p">){</span>
</span><span class='line'>                <span class="kd">var</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">val</span><span class="p">,</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>                    <span class="nx">length</span> <span class="o">=</span> <span class="nx">object</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="nx">object</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span>
</span><span class='line'>                    <span class="nx">isObj</span> <span class="o">=</span> <span class="nx">length</span> <span class="o">===</span> <span class="kc">undefined</span> <span class="o">||</span> <span class="nx">S</span><span class="p">.</span><span class="nx">type</span><span class="p">(</span><span class="nx">object</span><span class="p">)</span> <span class="o">===</span> <span class="s1">&#39;function&#39;</span><span class="p">;</span>
</span><span class='line'>                <span class="nx">context</span> <span class="o">=</span> <span class="nx">context</span> <span class="o">||</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>                <span class="k">if</span><span class="p">(</span> <span class="nx">isObj</span> <span class="p">){</span>
</span><span class='line'>                    <span class="k">for</span><span class="p">(</span> <span class="nx">key</span> <span class="k">in</span> <span class="nx">object</span> <span class="p">){</span>
</span><span class='line'>                        <span class="k">if</span><span class="p">(</span> <span class="nx">fn</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span> <span class="nx">context</span><span class="p">,</span> <span class="nx">object</span><span class="p">[</span><span class="nx">key</span><span class="p">],</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">object</span> <span class="p">)</span> <span class="o">===</span> <span class="nx">FALSE</span> <span class="p">){</span>
</span><span class='line'>                            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>                        <span class="p">}</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>                    <span class="k">for</span> <span class="p">(</span><span class="nx">val</span> <span class="o">=</span> <span class="nx">object</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>                         <span class="nx">i</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">length</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="nx">fn</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">context</span><span class="p">,</span> <span class="nx">val</span><span class="p">,</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">object</span><span class="p">)</span> <span class="o">!==</span> <span class="nx">FALSE</span><span class="p">;</span> <span class="nx">val</span> <span class="o">=</span> <span class="nx">object</span><span class="p">[</span><span class="o">++</span><span class="nx">i</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">object</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="nx">S</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="s1">&#39;Boolean Number String Function Array Date RegExp Object&#39;</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">),</span><span class="kd">function</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">lc</span><span class="p">){</span>
</span><span class='line'>        <span class="nx">class2type</span><span class="p">[</span><span class="s1">&#39;[object &#39;</span> <span class="o">+</span> <span class="nx">name</span> <span class="o">+</span> <span class="s1">&#39;]&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="nx">lc</span> <span class="o">=</span> <span class="nx">name</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">());</span>
</span><span class='line'>        <span class="nx">S</span><span class="p">[</span><span class="s1">&#39;is&#39;</span> <span class="o">+</span> <span class="nx">name</span><span class="p">]</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">o</span> <span class="p">){</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">S</span><span class="p">.</span><span class="nx">type</span><span class="p">(</span><span class="nx">o</span><span class="p">)</span> <span class="o">==</span> <span class="nx">lc</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">$</span><span class="p">.</span><span class="nx">extend</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span> <span class="p">){</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">options</span><span class="p">,</span> <span class="nx">name</span><span class="p">,</span> <span class="nx">src</span><span class="p">,</span> <span class="nx">copy</span><span class="p">,</span> <span class="nx">copyIsArray</span><span class="p">,</span> <span class="nx">clone</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">target</span> <span class="o">=</span> <span class="nx">arguments</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">||</span> <span class="p">{},</span>
</span><span class='line'>            <span class="nx">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">length</span> <span class="o">=</span> <span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">deep</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span> <span class="k">typeof</span> <span class="nx">target</span> <span class="o">===</span> <span class="s2">&quot;boolean&quot;</span> <span class="p">){</span>
</span><span class='line'>            <span class="nx">deep</span> <span class="o">=</span> <span class="nx">target</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">target</span> <span class="o">=</span> <span class="nx">arguments</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">||</span> <span class="p">{};</span>
</span><span class='line'>            <span class="nx">i</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span> <span class="k">typeof</span> <span class="nx">target</span> <span class="o">!==</span> <span class="s2">&quot;object&quot;</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="o">!</span><span class="nx">$</span><span class="p">.</span><span class="nx">isFunction</span><span class="p">(</span><span class="nx">target</span><span class="p">)){</span>
</span><span class='line'>            <span class="nx">target</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span> <span class="nx">length</span> <span class="o">===</span> <span class="nx">i</span> <span class="p">){</span><span class="c1">//extend jQuery itself</span>
</span><span class='line'>            <span class="nx">target</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>            <span class="o">--</span><span class="nx">i</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span> <span class="p">;</span> <span class="nx">i</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span> <span class="p">(</span><span class="nx">options</span> <span class="o">=</span> <span class="nx">arguments</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span> <span class="o">!=</span> <span class="kc">null</span> <span class="p">){</span>
</span><span class='line'>                <span class="k">for</span><span class="p">(</span> <span class="nx">name</span> <span class="k">in</span> <span class="nx">options</span> <span class="p">){</span>
</span><span class='line'>                    <span class="nx">src</span> <span class="o">=</span> <span class="nx">target</span><span class="p">[</span> <span class="nx">name</span> <span class="p">];</span>
</span><span class='line'>                    <span class="nx">copy</span> <span class="o">=</span> <span class="nx">options</span><span class="p">[</span> <span class="nx">name</span> <span class="p">];</span>
</span><span class='line'>                    <span class="k">if</span><span class="p">(</span> <span class="nx">target</span> <span class="o">===</span> <span class="nx">copy</span> <span class="p">){</span><span class="k">continue</span><span class="p">;}</span>
</span><span class='line'>                    <span class="k">if</span><span class="p">(</span> <span class="nx">deep</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="nx">copy</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="p">(</span> <span class="nx">$</span><span class="p">.</span><span class="nx">isPlainObject</span><span class="p">(</span><span class="nx">copy</span><span class="p">)</span> <span class="o">||</span> <span class="p">(</span> <span class="nx">copyIsArray</span> <span class="o">=</span> <span class="nx">$</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">copy</span><span class="p">)</span> <span class="p">)</span> <span class="p">)</span> <span class="p">){</span>
</span><span class='line'>                        <span class="k">if</span><span class="p">(</span> <span class="nx">copyIsArray</span> <span class="p">){</span>
</span><span class='line'>                            <span class="nx">copyIsArray</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>                            <span class="nx">clone</span> <span class="o">=</span> <span class="nx">src</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="nx">$</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">src</span><span class="p">)</span> <span class="o">?</span> <span class="nx">src</span> <span class="o">:</span> <span class="p">[];</span>
</span><span class='line'>                        <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>                            <span class="nx">clone</span> <span class="o">=</span> <span class="nx">src</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="nx">$</span><span class="p">.</span><span class="nx">isPlainObject</span><span class="p">(</span><span class="nx">src</span><span class="p">)</span> <span class="o">?</span> <span class="nx">src</span> <span class="o">:</span> <span class="p">{};</span>
</span><span class='line'>                        <span class="p">}</span>
</span><span class='line'>                        <span class="nx">target</span><span class="p">[</span> <span class="nx">name</span> <span class="p">]</span> <span class="o">=</span> <span class="nx">$</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span> <span class="nx">deep</span><span class="p">,</span> <span class="nx">clone</span><span class="p">,</span> <span class="nx">copy</span> <span class="p">);</span>
</span><span class='line'>                    <span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span> <span class="nx">copy</span> <span class="o">!==</span> <span class="kc">undefined</span> <span class="p">){</span>
</span><span class='line'>                        <span class="nx">target</span><span class="p">[</span> <span class="nx">name</span> <span class="p">]</span> <span class="o">=</span> <span class="nx">copy</span><span class="p">;</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">target</span><span class="p">;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>        <span class="nx">isFunction</span> <span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">obj</span><span class="p">){</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">$</span><span class="p">.</span><span class="nx">type</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span> <span class="o">===</span> <span class="s1">&#39;function&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nx">isArray</span> <span class="o">:</span> <span class="nb">Array</span><span class="p">.</span><span class="nx">isArray</span> <span class="o">||</span> <span class="kd">function</span><span class="p">(</span><span class="nx">obj</span><span class="p">){</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">$</span><span class="p">.</span><span class="nx">type</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span> <span class="o">===</span> <span class="s1">&#39;array&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nx">isNumeric</span> <span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">obj</span><span class="p">){</span>
</span><span class='line'>            <span class="k">return</span> <span class="o">!</span><span class="nb">isNaN</span><span class="p">(</span> <span class="nb">parseFloat</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span> <span class="p">)</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="nb">isFinite</span><span class="p">(</span><span class="nx">obj</span><span class="p">);</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nx">isWindow</span> <span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">obj</span><span class="p">){</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">obj</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="nx">obj</span> <span class="o">==</span> <span class="nx">obj</span><span class="p">.</span><span class="nb">window</span><span class="p">;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nx">type</span> <span class="o">:</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">o</span> <span class="p">){</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">o</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">?</span>
</span><span class='line'>                <span class="nb">String</span><span class="p">(</span> <span class="nx">o</span> <span class="p">)</span> <span class="o">:</span> <span class="nx">class2type</span><span class="p">[</span> <span class="nx">toString</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">o</span><span class="p">)</span> <span class="p">]</span> <span class="o">||</span> <span class="s2">&quot;object&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nx">isEmptyObject</span> <span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">obj</span><span class="p">){</span>
</span><span class='line'>            <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">name</span> <span class="k">in</span> <span class="nx">obj</span><span class="p">){</span>
</span><span class='line'>                <span class="k">if</span><span class="p">(</span> <span class="nx">name</span> <span class="o">!==</span> <span class="kc">undefined</span> <span class="p">){</span>
</span><span class='line'>                    <span class="k">return</span> <span class="nx">FALSE</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">TRUE</span><span class="p">;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nx">isPlainObject</span> <span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">obj</span><span class="p">){</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span> <span class="o">!</span><span class="nx">obj</span> <span class="o">||</span> <span class="nx">$</span><span class="p">.</span><span class="nx">type</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span> <span class="o">!==</span> <span class="s2">&quot;object&quot;</span> <span class="o">||</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">nodeType</span> <span class="o">||</span> <span class="nx">$</span><span class="p">.</span><span class="nx">isWindow</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span> <span class="p">){</span>
</span><span class='line'>                <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">try</span><span class="p">{</span>
</span><span class='line'>                <span class="k">if</span><span class="p">(</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">constructor</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span>
</span><span class='line'>                    <span class="o">!</span><span class="nx">hasOwn</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">obj</span><span class="p">,</span> <span class="s2">&quot;constructor&quot;</span><span class="p">)</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span>
</span><span class='line'>                    <span class="o">!</span><span class="nx">hasOwn</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">constructor</span><span class="p">.</span><span class="nx">prototype</span><span class="p">,</span> <span class="s2">&quot;isPrototypeOf&quot;</span><span class="p">)){</span>
</span><span class='line'>                    <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">e</span><span class="p">){</span>
</span><span class='line'>                <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">key</span><span class="p">;</span>
</span><span class='line'>            <span class="k">for</span><span class="p">(</span> <span class="nx">key</span> <span class="k">in</span> <span class="nx">obj</span> <span class="p">){}</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">key</span> <span class="o">===</span> <span class="kc">undefined</span> <span class="o">||</span> <span class="nx">hasOwn</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span> <span class="nx">obj</span><span class="p">,</span> <span class="nx">key</span> <span class="p">);</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nx">each</span> <span class="o">:</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">object</span><span class="p">,</span> <span class="nx">callback</span><span class="p">,</span> <span class="nx">args</span> <span class="p">){</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">name</span><span class="p">,</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">length</span> <span class="o">=</span> <span class="nx">object</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">isObj</span> <span class="o">=</span> <span class="nx">length</span> <span class="o">===</span> <span class="kc">undefined</span> <span class="o">||</span> <span class="nx">$</span><span class="p">.</span><span class="nx">isFunction</span><span class="p">(</span> <span class="nx">object</span> <span class="p">);</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span> <span class="nx">args</span> <span class="p">){</span>
</span><span class='line'>                <span class="k">if</span><span class="p">(</span> <span class="nx">isObj</span> <span class="p">){</span>
</span><span class='line'>                    <span class="k">for</span><span class="p">(</span> <span class="nx">name</span> <span class="k">in</span> <span class="nx">object</span> <span class="p">){</span>
</span><span class='line'>                        <span class="k">if</span><span class="p">(</span> <span class="nx">callback</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span> <span class="nx">object</span><span class="p">[</span><span class="nx">name</span><span class="p">]</span> <span class="p">,</span> <span class="nx">args</span><span class="p">)</span> <span class="o">===</span> <span class="kc">false</span> <span class="p">){</span><span class="k">break</span><span class="p">;}</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>                    <span class="k">for</span><span class="p">(</span> <span class="p">;</span> <span class="nx">i</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">length</span><span class="p">;</span> <span class="p">){</span>
</span><span class='line'>                        <span class="k">if</span><span class="p">(</span> <span class="nx">callback</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span> <span class="nx">object</span><span class="p">[</span><span class="nx">i</span><span class="o">++</span><span class="p">],</span> <span class="nx">args</span><span class="p">)</span> <span class="o">===</span> <span class="kc">false</span><span class="p">){</span><span class="k">break</span><span class="p">;}</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span> <span class="nx">isObj</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="k">for</span> <span class="p">(</span> <span class="nx">name</span> <span class="k">in</span> <span class="nx">object</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                        <span class="k">if</span> <span class="p">(</span> <span class="nx">callback</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span> <span class="nx">object</span><span class="p">[</span> <span class="nx">name</span> <span class="p">],</span> <span class="nx">name</span><span class="p">,</span> <span class="nx">object</span><span class="p">[</span> <span class="nx">name</span> <span class="p">]</span> <span class="p">)</span> <span class="o">===</span> <span class="kc">false</span> <span class="p">)</span> <span class="p">{</span><span class="k">break</span><span class="p">;}</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                    <span class="k">for</span> <span class="p">(</span> <span class="p">;</span> <span class="nx">i</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">length</span><span class="p">;</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                        <span class="k">if</span> <span class="p">(</span> <span class="nx">callback</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span> <span class="nx">object</span><span class="p">[</span> <span class="nx">i</span> <span class="p">],</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">object</span><span class="p">[</span> <span class="nx">i</span><span class="o">++</span> <span class="p">]</span> <span class="p">)</span> <span class="o">===</span> <span class="kc">false</span> <span class="p">)</span> <span class="p">{</span><span class="k">break</span><span class="p">;}</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">object</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="s2">&quot;Boolean Number String Function Array Date RegExp Object&quot;</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">),</span> <span class="kd">function</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="nx">name</span><span class="p">){</span>
</span><span class='line'>        <span class="nx">class2type</span><span class="p">[</span> <span class="s2">&quot;[object &quot;</span><span class="o">+</span> <span class="nx">name</span> <span class="o">+</span><span class="s2">&quot;]&quot;</span> <span class="p">]</span> <span class="o">=</span> <span class="nx">name</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">();</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">})(</span><span class="s1">&#39;jQuery&#39;</span><span class="p">,</span> <span class="s1">&#39;KISSY&#39;</span><span class="p">,</span> <span class="kc">undefined</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jquery unique 详解]]></title>
    <link href="http://chenming142.github.com/blog/2013/03/15/jquery-unique/"/>
    <updated>2013-03-15T21:22:00+08:00</updated>
    <id>http://chenming142.github.com/blog/2013/03/15/jquery-unique</id>
    <content type="html"><![CDATA[<blockquote><p>最近在工作中使用到了jquery.unique函数,用的过程中出现了很多偏差,所以就查看了jquery源码现在总结一下.</p></blockquote>

<p>先看看jQuery.unique(array)api是:</p>

<pre><code>删除数组中重复元素.只处理删除DOM元素数组,而不能处理字符串或者数字数组.
</code></pre>

<p>再来看看jquery.unique的测试结果:<br/>
<img src="/images/common/2013-03-15-jquery-unique/20130315214713.jpg" title="jquery-1.4.unique" alt="jquery-1.4" />
[<strong>jquey-1.4</strong>] <br/>
<img src="/images/common/2013-03-15-jquery-unique/20130315214630.jpg" title="jquery-1.7.2.unique" alt="jquery-1.7" />
[<strong>jquey-1.7.2</strong>]</p>

<p>从测试结果看,1.4版本虽未能够完美实现去除重复元素,但是某些情况(即数组是有序的)下也是能处理数值和字符型数值数组的;而1.7.2版已能完美支持了.</p>

<h3>去除重复元素的实现方法</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Javascript Array Syntax </span><a href='http://j.mp/pPUUmW'>MDN Documentation </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">$</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">unique1</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">elems</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">elems</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="o">++</span><span class="nx">i</span><span class="p">)</span> <span class="p">{</span>         <span class="c1">// 外层++i</span>
</span><span class='line'>                <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">j</span> <span class="o">=</span> <span class="nx">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">elems</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="o">++</span><span class="nx">j</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// 内层j = i +1</span>
</span><span class='line'>                    <span class="k">if</span> <span class="p">(</span><span class="nx">elems</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">===</span> <span class="nx">elems</span><span class="p">[</span><span class="nx">j</span><span class="p">])</span> <span class="p">{</span>             <span class="c1">// 判断是否重复的</span>
</span><span class='line'>                        <span class="nx">elems</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">i</span><span class="o">--</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>                <span class="c1">// 如果重复,就去掉</span>
</span><span class='line'>                        <span class="k">break</span><span class="p">;</span>                               <span class="c1">// i-- 与break,保证外层始终从0开始</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">elems</span><span class="p">;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nx">unique2</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">elemsWithId</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>            <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">elemsWithId</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="o">++</span><span class="nx">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="kd">var</span> <span class="nx">elem</span> <span class="o">=</span> <span class="nx">elemsWithId</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
</span><span class='line'>                <span class="nx">obj</span><span class="p">[</span><span class="nx">elem</span><span class="p">.</span><span class="nx">getAttribute</span><span class="p">(</span><span class="s1">&#39;id&#39;</span><span class="p">)]</span> <span class="o">=</span> <span class="nx">obj</span><span class="p">[</span><span class="nx">elem</span><span class="p">.</span><span class="nx">getAttribute</span><span class="p">(</span><span class="s1">&#39;id&#39;</span><span class="p">)]</span> <span class="o">||</span> <span class="nx">elem</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="nx">elemsWithId</span><span class="p">.</span><span class="nx">length</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>            <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">id</span> <span class="k">in</span> <span class="nx">obj</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">elemsWithId</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">obj</span><span class="p">[</span><span class="nx">id</span><span class="p">])</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">elemsWithId</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}();</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
方法一使用了两重循环,算法复杂度为<code>O(n^2)</code>.实现思路比较直观,即遍历数组,看每个元素是否与后面的元素重复,有重复则移除;但是DOM Element数量较多时性能较差,而jQuery中对大量元素进行去除重复的操作很普遍. <br/>
方法二将Objct当做HashMap/HashSet来使用,算法复杂度为<code>O(n)</code>;遗憾的是JavaScript中无法直接用DOM Element作为Object的key,因此只能将id作为key,然而并非所有的 DOM Element 都是有id 的，所以这种方法并不通用。</p>

<!-- more -->


<p>我们知道,基于比较的排序算法最多可以将算法复杂度降到<code>O(nlgn)</code>，（比如结合使用快速排序和插入排序），之后遍历数组时只要比较相邻元素就可以了：  <br/>
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Javascript Array Syntax </span><a href='http://j.mp/pPUUmW'>MDN Documentation </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">unique3</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">sortedElems</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span> <span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">sortedElems</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span> <span class="nx">sortedElems</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">===</span> <span class="nx">sortedElems</span><span class="p">[</span> <span class="nx">i</span> <span class="o">-</span> <span class="mi">1</span> <span class="p">]</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">sortedElems</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span> <span class="nx">i</span><span class="o">--</span><span class="p">,</span> <span class="mi">1</span> <span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">sortedElems</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
JavaScript中有内置的排序算法。因此，在JavaScript中，先排序后去除重复是较好的做法。</p>

<h3>先排序后去除重复</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Javascript Array Syntax </span><a href='http://j.mp/pPUUmW'>MDN Documentation </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">sortOrder</span><span class="p">,</span> <span class="nx">siblingCheck</span><span class="p">;</span>
</span><span class='line'><span class="nx">sortOrder</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">a</span><span class="p">,</span> <span class="nx">b</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">al</span><span class="p">,</span> <span class="nx">bl</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">ap</span> <span class="o">=</span> <span class="p">[],</span>
</span><span class='line'>        <span class="nx">bp</span> <span class="o">=</span> <span class="p">[],</span>
</span><span class='line'>        <span class="nx">aup</span> <span class="o">=</span> <span class="nx">a</span><span class="p">.</span><span class="nx">parentNode</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">bup</span> <span class="o">=</span> <span class="nx">b</span><span class="p">.</span><span class="nx">parentNode</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">cur</span> <span class="o">=</span> <span class="nx">aup</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">// If the nodes are siblings (or identical) we can do a quick check</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span> <span class="nx">aup</span> <span class="o">===</span> <span class="nx">bup</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">siblingCheck</span><span class="p">(</span> <span class="nx">a</span><span class="p">,</span> <span class="nx">b</span> <span class="p">);</span>
</span><span class='line'>    <span class="c1">// If no parents were found then the nodes are disconnected</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span> <span class="o">!</span><span class="nx">aup</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span> <span class="o">!</span><span class="nx">bup</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="c1">// Otherwise they&#39;re somewhere else in the tree so we need</span>
</span><span class='line'>    <span class="c1">// to build up a full list of the parentNodes for comparison</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span> <span class="nx">cur</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">ap</span><span class="p">.</span><span class="nx">unshift</span><span class="p">(</span> <span class="nx">cur</span> <span class="p">);</span>
</span><span class='line'>        <span class="nx">cur</span> <span class="o">=</span> <span class="nx">cur</span><span class="p">.</span><span class="nx">parentNode</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">cur</span> <span class="o">=</span> <span class="nx">bup</span><span class="p">;</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span> <span class="nx">cur</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">bp</span><span class="p">.</span><span class="nx">unshift</span><span class="p">(</span> <span class="nx">cur</span> <span class="p">);</span>
</span><span class='line'>        <span class="nx">cur</span> <span class="o">=</span> <span class="nx">cur</span><span class="p">.</span><span class="nx">parentNode</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">al</span> <span class="o">=</span> <span class="nx">ap</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">bl</span> <span class="o">=</span> <span class="nx">bp</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">// Start walking down the tree looking for a discrepancy</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span> <span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">al</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">bl</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span> <span class="nx">ap</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">!==</span> <span class="nx">bp</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">siblingCheck</span><span class="p">(</span> <span class="nx">ap</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span> <span class="nx">bp</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="c1">// We ended someplace up the tree so do a sibling check</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">i</span> <span class="o">===</span> <span class="nx">al</span> <span class="o">?</span>
</span><span class='line'>        <span class="nx">siblingCheck</span><span class="p">(</span> <span class="nx">a</span><span class="p">,</span> <span class="nx">bp</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span> <span class="o">-</span><span class="mi">1</span> <span class="p">)</span> <span class="o">:</span>
</span><span class='line'>        <span class="nx">siblingCheck</span><span class="p">(</span> <span class="nx">ap</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span> <span class="nx">b</span><span class="p">,</span> <span class="mi">1</span> <span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="nx">siblingCheck</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">,</span> <span class="nx">ret</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span> <span class="nx">a</span> <span class="o">===</span> <span class="nx">b</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">ret</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">cur</span> <span class="o">=</span> <span class="nx">a</span><span class="p">.</span><span class="nx">nextSibling</span><span class="p">;</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span> <span class="nx">cur</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span> <span class="nx">cur</span> <span class="o">===</span> <span class="nx">b</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="nx">cur</span> <span class="o">=</span> <span class="nx">cur</span><span class="p">.</span><span class="nx">nextSibling</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
使用Array内置的sort 方法,并传入了自定义的排序函数sortOrder. <br/>
sortOrder函数的做法是:获取两个被比较元素的所有"直系祖宗",从而确定两个元素在DOM树种的位置;一般来说,两个元素有共同的根,那么就从根元素开始依次向下遍历,直到"分叉点",再对分叉点的元素进行比较.如果直到遍历结束,仍未能到达分叉点(如元素a先遍历,那么i就与al相等),则直接将a与b当前遍历到的"祖宗"进行比较.</p>

<h3>排序时进行检查</h3>

<p>优化:先判断元素中是否存在重复的,如果元素不重复,那么就可以不执行后面的遍历并去除重复操作了.实现如下:
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Javascript Array Syntax </span><a href='http://j.mp/pPUUmW'>MDN Documentation </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">hasDuplicate</span> <span class="o">=</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">baseHasDuplicate</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'><span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">].</span><span class="nx">sort</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">baseHasDuplicate</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">uniqueSort</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">results</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span> <span class="nx">sortOrder</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">hasDuplicate</span> <span class="o">=</span> <span class="nx">baseHasDuplicate</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">results</span><span class="p">.</span><span class="nx">sort</span><span class="p">(</span> <span class="nx">sortOrder</span> <span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span> <span class="nx">hasDuplicate</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">for</span> <span class="p">(</span> <span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">results</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span> <span class="nx">results</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">===</span> <span class="nx">results</span><span class="p">[</span> <span class="nx">i</span> <span class="o">-</span> <span class="mi">1</span> <span class="p">]</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="nx">results</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span> <span class="nx">i</span><span class="o">--</span><span class="p">,</span> <span class="mi">1</span> <span class="p">);</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">results</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
一个特殊的例外是某些浏览器可能进行了特殊的优化，那么在元素相等时可能就没有调用我们的排序函数了；这种情况下，排序时检查重复的方案就不可行。因此，如果浏览器在元素相等的情况下会调用我们的排序函数，那么就将 hasDuplicate 置为 false，并在排序过程中检查重复；否则，无论如何都视为存在重复，仍然进行遍历去除重复的操作。</p>

<h3>使用compareDocumentPosition()进行优化</h3>

<p>事实上，除 IE 之外浏览器都有内置的 compareDocumentPosition() 方法，用于比较两个 DOM Element 的位置，因此我们可以引入 compareDocumentPosition() 进行优化: <br/>
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Javascript Array Syntax </span><a href='http://j.mp/pPUUmW'>MDN Documentation </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">if</span> <span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">documentElement</span><span class="p">.</span><span class="nx">compareDocumentPosition</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">sort</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">a</span> <span class="o">===</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">hasDuplicate</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>            <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">a</span><span class="p">.</span><span class="nx">compareDocumentPosition</span> <span class="o">||</span> <span class="o">!</span><span class="nx">b</span><span class="p">.</span><span class="nx">compareDocumentPosition</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">compareDocumentPosition</span> <span class="o">?</span> <span class="o">-</span><span class="mi">1</span> <span class="o">:</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">compareDocumentPosition</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="mi">4</span> <span class="o">?</span> <span class="o">-</span><span class="mi">1</span> <span class="o">:</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
a.compareDocumentPosition(b) &amp; 4 表示取返回值的二进制表示的倒数第三位; <br/>
compareDocumentPosition() 的返回值的每个二进制位表示不同的含义，其中倒数第三位表示元素 a 是否在元素 b 的 “前面”</p>

<p>jQuery 的 unique() 在去除重复前先进行了排序，并使用了多种优化手段，实现了性能较好并且比较通用的去除重复的 DOM Element 的功能。</p>

<h3>最后的最后</h3>

<p><img src="/images/common/2013-03-15-jquery-unique/20130315234659.jpg" title="ff jquey-1.7" alt="ff jquery-1.7" />
[<strong>ff jquery-1.7</strong>]
这又是什么原因,你知道了吗?</p>
]]></content>
  </entry>
  
</feed>
